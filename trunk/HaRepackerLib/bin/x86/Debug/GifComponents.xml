<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GifComponents</name>
    </assembly>
    <members>
        <member name="T:GifComponents.GifComponentStatus">
            <summary>
            The status of a component in a GIF data stream which is being decoded.
            Includes a member of the GifDecoderStatus enumeration, and some text
            to describe what (if anything) is wrong.
            </summary>
        </member>
        <member name="M:GifComponents.GifComponentStatus.#ctor(GifComponents.ErrorState,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="errorState">
            A member of the Gif.Components.ErrorState enumeration.
            </param>
            <param name="errorMessage">
            Any error message associated with the error state.
            </param>
        </member>
        <member name="M:GifComponents.GifComponentStatus.ToString">
            <summary>
            Gets a string representation of the GifComponentStatus's ErrorState
            property.
            </summary>
            <returns>
            A string representation of the ErrorState property.
            </returns>
        </member>
        <member name="P:GifComponents.GifComponentStatus.ErrorState">
            <summary>
            Gets a member of the Gif.Components.ErrorState enumeration 
            describing the error state of a component of a GIF data stream.
            </summary>
        </member>
        <member name="P:GifComponents.GifComponentStatus.ErrorMessage">
            <summary>
            Gets any error message associated with the status of a GIF 
            component.
            </summary>
        </member>
        <member name="T:GifComponents.Tools.ImageTools">
            <summary>
            Provides a set of static methods for working with 
            <see cref="T:System.Drawing.Image"/> instances.
            TODO: move into GifComponents.NUnit project
            </summary>
        </member>
        <member name="M:GifComponents.Tools.ImageTools.GetColours(System.Drawing.Image)">
            <summary>
            Extracts the pixels of the supplied image into a generic collection 
            of <see cref="T:System.Drawing.Color"/> instances.
            </summary>
            <param name="image">
            The image from which to extract the pixels.
            </param>
            <returns>
            A collection of the colours of all the pixels in the supplied image.
            </returns>
        </member>
        <member name="M:GifComponents.Tools.ImageTools.GetDistinctColours(System.Collections.ObjectModel.Collection{System.Drawing.Color})">
            <summary>
            Gets a generic collection of all the distinct 
            <see cref="T:System.Drawing.Color"/>s contained in the supplied 
            image, i.e. each colour is included in the return value only once,
            regardless of how many pixels in the image are of that colour.
            </summary>
            <param name="imageColours">
            A collection of the colours of all the pixels in the image.
            </param>
            <returns></returns>
        </member>
        <member name="M:GifComponents.Tools.ImageTools.GetDistinctColours(System.Drawing.Color[])">
            <summary>
            Gets a generic collection of all the distinct 
            <see cref="T:System.Drawing.Color"/>s contained in the supplied 
            image, i.e. each colour is included in the return value only once,
            regardless of how many pixels in the image are of that colour.
            </summary>
            <param name="imageColours">
            A collection of the colours of all the pixels in the image.
            </param>
            <returns></returns>
        </member>
        <member name="M:GifComponents.Tools.ImageTools.GetDistinctColours(System.Drawing.Image)">
            <summary>
            Gets a generic collection of all the distinct 
            <see cref="T:System.Drawing.Color"/>s contained in the supplied 
            image, i.e. each colour is included in the return value only once,
            regardless of how many pixels in the image are of that colour.
            </summary>
            <param name="image">The image to examine</param>
            <returns>The distinct colours in the supplied image</returns>
        </member>
        <member name="M:GifComponents.Tools.ImageTools.GetRgbArray(System.Collections.ObjectModel.Collection{System.Drawing.Color})">
            <summary>
            Gets a byte array consisting of the red, green and blue intensities 
            of the colours in the supplied collection.
            </summary>
            <param name="colours">
            The collection of colours to convert to a byte array
            </param>
            <returns>
            A byte array consiting of red, green and blue intensities.
            3 bytes per pixel - red first, then green, then blue.
            </returns>
        </member>
        <member name="M:GifComponents.Tools.ImageTools.GetRgbArray(System.Drawing.Color[])">
            <summary>
            Gets a byte array consisting of the red, green and blue intensities 
            of the colours in the supplied array of colours.
            </summary>
            <param name="colours">
            The array of colours to convert to a byte array
            </param>
            <returns>
            A byte array consiting of red, green and blue intensities.
            3 bytes per pixel - red first, then green, then blue.
            </returns>
        </member>
        <member name="M:GifComponents.Tools.ImageTools.GetRgbCollection(System.Collections.ObjectModel.Collection{System.Drawing.Color})">
            <summary>
            Gets a generic collection of bytes consisting of the red, green and 
            blue intensities of the colours in the supplied collection.
            </summary>
            <param name="colours">
            The collection of colours to convert to a collection of bytes
            </param>
            <returns>
            A collection of bytes consiting of red, green and blue intensities.
            3 bytes per pixel - red first, then green, then blue.
            </returns>
        </member>
        <member name="M:GifComponents.Tools.ImageTools.GetRgbCollection(System.Drawing.Color[])">
            <summary>
            Gets a generic collection of bytes consisting of the red, green and 
            blue intensities of the colours in the supplied collection.
            </summary>
            <param name="colours">
            The collection of colours to convert to a collection of bytes
            </param>
            <returns>
            A collection of bytes consiting of red, green and blue intensities.
            3 bytes per pixel - red first, then green, then blue.
            </returns>
        </member>
        <member name="T:GifComponents.Components.NetscapeExtension">
            <summary>
            An application extension which controls the number of times an animation
            should be displayed.
            See http://www.let.rug.nl/~kleiweg/gif/netscape.html for format
            </summary>
        </member>
        <member name="T:GifComponents.Components.ApplicationExtension">
            <summary>
            The Application Extension contains application-specific information; 
            it conforms with the extension block syntax, and its block label is 
            0xFF.
            
            See http://www.w3.org/Graphics/GIF/spec-gif89a.txt section 26.
            </summary>
        </member>
        <member name="T:GifComponents.Components.GifComponent">
            <summary>
            The base class for a component of a Graphics Interchange File data 
            stream.
            </summary>
        </member>
        <member name="F:GifComponents.Components.GifComponent.CodePlaintextLabel">
            <summary>
            Plain text label - identifies the current block as a plain text
            extension.
            Value 0x01.
            TODO: add see cref once PlainTextExtension class implemented
            </summary>
        </member>
        <member name="F:GifComponents.Components.GifComponent.CodeExtensionIntroducer">
            <summary>
            Extension introducer - identifies the start of an extension block.
            Value 0x21.
            </summary>
        </member>
        <member name="F:GifComponents.Components.GifComponent.CodeImageSeparator">
            <summary>
            Image separator - identifies the start of an 
            <see cref="T:GifComponents.Components.ImageDescriptor"/>.
            Value 0x2C.
            </summary>
        </member>
        <member name="F:GifComponents.Components.GifComponent.CodeTrailer">
            <summary>
            Trailer - This is a single-field block indicating the end of the GIF
            data stream.
            Value 0x3B.
            </summary>
        </member>
        <member name="F:GifComponents.Components.GifComponent.CodeGraphicControlLabel">
            <summary>
            Graphic control label - identifies the current block as a
            <see cref="T:GifComponents.Components.GraphicControlExtension"/>.
            Value 0xF9.
            </summary>
        </member>
        <member name="F:GifComponents.Components.GifComponent.CodeCommentLabel">
            <summary>
            Comment label - identifies the current block as a comment extension.
            Value 0xFE.
            TODO: add see cref once CommentExtension class is implemented.
            </summary>
        </member>
        <member name="F:GifComponents.Components.GifComponent.CodeApplicationExtensionLabel">
            <summary>
            Application extension label - identifies the current block as a
            <see cref="T:GifComponents.Components.ApplicationExtension"/>.
            Value 0xFF.
            </summary>
        </member>
        <member name="F:GifComponents.Components.GifComponent._status">
            <summary>
            The status of this component, consisting of its error state and any
            associated error messages.
            </summary>
        </member>
        <member name="F:GifComponents.Components.GifComponent._xmlDebugging">
            <summary>
            Set to true to store information in _debugXml about how the GIF
            stream was decoder. Set to false for production use.
            </summary>
        </member>
        <member name="F:GifComponents.Components.GifComponent._debugXmlWriter">
            <summary>
            An <see cref="T:System.Xml.XmlTextWriter"/> which is used to write an XML 
            document showing how the GIF stream was decoded.
            For debugging use only.
            </summary>
        </member>
        <member name="F:GifComponents.Components.GifComponent._debugXmlStream">
            <summary>
            Holds a stream of XML showing how the GIF stream was decoded.
            For debugging use only.
            </summary>
        </member>
        <member name="M:GifComponents.Components.GifComponent.#ctor">
            <summary>
            Constructor.
            This is implicitly called by constructors of derived types.
            </summary>
        </member>
        <member name="M:GifComponents.Components.GifComponent.#ctor(System.Boolean)">
            <summary>
            Constructor.
            This should be called from the constructor of a derived type which
            accepts a Stream and a boolean as parameters.
            </summary>
            <param name="xmlDebugging">
            True: this component will create XML debug information whilst being 
            instantiated from a stream.
            False: this component will not create XML debug information.
            </param>
        </member>
        <member name="M:GifComponents.Components.GifComponent.ToString">
            <summary>
            Gets a string representation of the error status of this component
            and its subcomponents.
            </summary>
            <returns>
            A string representation of the error status of this component and
            its subcomponents.
            </returns>
        </member>
        <member name="M:GifComponents.Components.GifComponent.TestState(GifComponents.ErrorState)">
            <summary>
            Tests whether the error state of this component or any of its member
            components contains the supplied member of the ErrorState 
            enumeration.
            </summary>
            <param name="state">
            The error state to look for in the current instance's state.
            </param>
            <returns>
            True if the current instance's error state includes the supplied
            error state, otherwise false.
            </returns>
        </member>
        <member name="M:GifComponents.Components.GifComponent.SetStatus(GifComponents.ErrorState,System.String)">
            <summary>
            Sets the ComponentStatus property of thie GifComponent.
            </summary>
            <param name="errorState">
            A member of the Gif.Components.ErrorState enumeration.
            </param>
            <param name="errorMessage">
            An error message associated with the error state.
            </param>
        </member>
        <member name="M:GifComponents.Components.GifComponent.ToHex(System.Int32)">
            <summary>
            Converts the supplied integer to a 2-character hexadecimal value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:GifComponents.Components.GifComponent.Read(System.IO.Stream)">
            <summary>
            Reads a single byte from the input stream and advances the position
            within the stream by one byte, or returns -1 if at the end of the
            stream.
            </summary>
            <param name="inputStream">
            The input stream to read.
            </param>
            <returns>
            The unsigned byte, cast to an Int32, or -1 if at the end of the 
            stream.
            </returns>
        </member>
        <member name="M:GifComponents.Components.GifComponent.ReadShort(System.IO.Stream)">
            <summary>
            Reads next 16-bit value, least significant byte first, and advances 
            the position within the stream by two bytes.
            </summary>
            <param name="inputStream">
            The input stream to read.
            </param>
            <returns>
            The next two bytes in the stream, cast to an Int32, or -1 if at the 
            end of the stream.
            </returns>
        </member>
        <member name="M:GifComponents.Components.GifComponent.SkipBlocks(System.IO.Stream)">
            <summary>
            Skips variable length blocks up to and including next zero length 
            block (block terminator).
            </summary>
            <param name="inputStream">
            The input stream to read.
            </param>
        </member>
        <member name="M:GifComponents.Components.GifComponent.WriteString(System.String,System.IO.Stream)">
            <summary>
            Writes the supplied string to the supplied output stream
            </summary>
            <param name="textToWrite">
            The string to be written to the output stream
            </param>
            <param name="outputStream">
            The stream to write the string to.
            </param>
        </member>
        <member name="M:GifComponents.Components.GifComponent.WriteShort(System.Int32,System.IO.Stream)">
            <summary>
            Writes a 16-bit value to the supplied output stream, 
            least-significant byte first.
            The first two bytes in the supplied value are discarded.
            </summary>
            <param name="valueToWrite">
            The value to write to the output stream.
            </param>
            <param name="outputStream">
            The stream to write to.
            </param>
        </member>
        <member name="M:GifComponents.Components.GifComponent.WriteByte(System.Int32,System.IO.Stream)">
            <summary>
            Writes the least significant byte of the supplied value to the 
            supplied stream.
            The first 3 bytes of the supplied value are discarded.
            </summary>
            <param name="valueToWrite">
            The value to write to the output stream.
            </param>
            <param name="outputStream">
            The stream to write to.
            </param>
        </member>
        <member name="M:GifComponents.Components.GifComponent.WriteDebugXmlStart">
            <summary>
            Starts the process of creating debug XML during decoding.
            This method is called by the GifComponent constructor if the supplied
            xmlDebugging parameter is set to true.
            Sets the private member _xmlDebugging to true.
            Creates a new XmlWriter with an underlying MemoryStream and writes
            a start element to it, named after the derived type.
            </summary>
        </member>
        <member name="M:GifComponents.Components.GifComponent.WriteDebugXmlErrorState(GifComponents.ErrorState,System.String)">
            <summary>
            Writes the latest error state and error message to the debug XML
            stream.
            </summary>
            <param name="errorState">The component's latest error state</param>
            <param name="errorMessage">The associated error message</param>
            <remarks>
            There is no need to call this from derived classes as it is called
            by the SetStatus method.
            </remarks>
        </member>
        <member name="M:GifComponents.Components.GifComponent.WriteDebugXmlByteValues(System.String,System.Int32[])">
            <summary>
            If the XmlDebugging property is set to true, writes a BytesRead
            node to the DebugXmlWriter containing a hexadecimal representation
            of the supplied byte array.
            If the XmlDebugging property is set to false, does nothing.
            </summary>
            <param name="elementName">The name of the element to write</param>
            <param name="bytes">The byte array to write</param>
            <exception cref="T:System.ArgumentNullException">
            The supplied byte array is null.
            </exception>
        </member>
        <member name="M:GifComponents.Components.GifComponent.WriteDebugXmlByteValues(System.String,System.Byte[])">
            <summary>
            If the XmlDebugging property is set to true, writes a BytesRead
            node to the DebugXmlWriter containing a hexadecimal representation
            of the supplied byte array.
            If the XmlDebugging property is set to false, does nothing.
            </summary>
            <param name="elementName">The name of the element to write</param>
            <param name="bytes">The byte array to write</param>
            <exception cref="T:System.ArgumentNullException">
            The supplied byte array is null.
            </exception>
        </member>
        <member name="M:GifComponents.Components.GifComponent.WriteDebugXmlComment(System.String)">
            <summary>
            Writes a comment to the debug XML.
            </summary>
            <param name="comment">The comment to write</param>
        </member>
        <member name="M:GifComponents.Components.GifComponent.WriteDebugXmlNode(System.Xml.XmlReader)">
            <summary>
            Useful for writing the debug XML of a child component to its parent
            component's debug XML stream.
            </summary>
        </member>
        <member name="M:GifComponents.Components.GifComponent.WriteDebugXmlRaw(System.String)">
            <summary>
            Writes raw markup to the debug XML stream from the supplied string.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:GifComponents.Components.GifComponent.WriteDebugXmlElement(System.String,System.Boolean)">
            <summary>
            Writes an element to the DebugXml with the supplied element name
            and a boolean value as the inner text.
            </summary>
            <param name="nodeName">
            The name of the element to write.
            </param>
            <param name="innerText">
            The inner text of the element to write.
            </param>
        </member>
        <member name="M:GifComponents.Components.GifComponent.WriteDebugXmlElement(System.String,System.Int32)">
            <summary>
            Writes an element to the DebugXml with the supplied element name
            and inner text.
            </summary>
            <param name="nodeName">
            The name of the element to write.
            </param>
            <param name="innerText">
            The inner text of the element to write.
            </param>
        </member>
        <member name="M:GifComponents.Components.GifComponent.WriteDebugXmlElement(System.String,System.String)">
            <summary>
            Writes an element to the DebugXml with the supplied element name
            and inner text.
            </summary>
            <param name="nodeName">
            The name of the element to write.
            </param>
            <param name="innerText">
            The inner text of the element to write.
            </param>
            <remarks>
            Call this method in preference to _debugXmlWriter.WriteElementString
            because this method removes null characters from the inner text 
            before attempting to write.
            </remarks>
        </member>
        <member name="M:GifComponents.Components.GifComponent.WriteDebugXmlAttribute(System.String,System.Boolean)">
            <summary>
            Adds an attribute to the current element. Call after 
            WriteDebugXmlStartElement and before WriteDebugXmlEndElement.
            </summary>
            <param name="name">The attribute name</param>
            <param name="value">The attribute value</param>
        </member>
        <member name="M:GifComponents.Components.GifComponent.WriteDebugXmlAttribute(System.String,System.Int32)">
            <summary>
            Adds an attribute to the current element. Call after 
            WriteDebugXmlStartElement and before WriteDebugXmlEndElement.
            </summary>
            <param name="name">The attribute name</param>
            <param name="value">The attribute value</param>
        </member>
        <member name="M:GifComponents.Components.GifComponent.WriteDebugXmlAttribute(System.String,System.String)">
            <summary>
            Adds an attribute to the current element. Call after 
            WriteDebugXmlStartElement and before WriteDebugXmlEndElement.
            </summary>
            <param name="name">The attribute name</param>
            <param name="value">The attribute value</param>
        </member>
        <member name="M:GifComponents.Components.GifComponent.WriteDebugXmlStartElement(System.String)">
            <summary>
            Writes out a start tag with the specified name to the debug XML
            stream.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:GifComponents.Components.GifComponent.WriteDebugXmlEndElement">
            <summary>
            Writes out the closing tag of the current element to the debug XML
            stream.
            </summary>
        </member>
        <member name="M:GifComponents.Components.GifComponent.WriteDebugXmlFinish">
            <summary>
            Finishes off writing the debug XML.
            </summary>
        </member>
        <member name="M:GifComponents.Components.GifComponent.WriteToStream(System.IO.Stream)">
            <summary>
            Appends the current GifComponent to the supplied output stream.
            </summary>
            <param name="outputStream">
            The stream to which the component is to be written.
            </param>
        </member>
        <member name="F:GifComponents.Components.GifComponent._disposed">
            <summary>
            Indicates whether or not the Dispose( bool ) method has already been 
            called.
            </summary>
        </member>
        <member name="M:GifComponents.Components.GifComponent.Finalize">
            <summary>
            Finalzer.
            </summary>
        </member>
        <member name="M:GifComponents.Components.GifComponent.Dispose">
            <summary>
            Disposes resources used by this class.
            </summary>
        </member>
        <member name="M:GifComponents.Components.GifComponent.Dispose(System.Boolean)">
            <summary>
            Disposes resources used by this class.
            </summary>
            <param name="disposing">
            Indicates whether this method is being called by the class's Dispose
            method (true) or by the garbage collector (false).
            </param>
        </member>
        <member name="P:GifComponents.Components.GifComponent.ComponentStatus">
            <summary>
            Gets the status of this component, consisting of its error state
            and any associated error message.
            </summary>
        </member>
        <member name="P:GifComponents.Components.GifComponent.ErrorState">
            <summary>
            Gets the member of the Gif.Components.ErrorState enumeration held 
            within the ComponentStatus property.
            </summary>
        </member>
        <member name="P:GifComponents.Components.GifComponent.ConsolidatedState">
            <summary>
            Gets the combined error states of this component and all its child
            components.
            </summary>
            <remarks>
            This property uses reflection to inspect the runtime type of the
            current instance and performs a bitwise or of the ErrorStates of
            the current instance and of any GifComponents within it.
            </remarks>
        </member>
        <member name="P:GifComponents.Components.GifComponent.ErrorMessage">
            <summary>
            Gets any error message associated with the component's error state.
            </summary>
        </member>
        <member name="P:GifComponents.Components.GifComponent.DebugXml">
            <summary>
            Gets the XML which provides insight into how the GIF stream or 
            component was interpreted by this library.
            For debugging use if the GIF stream cannot be decoded.
            TODO: view DebugXml in a multi-line text box in PropertyGrid
            </summary>
        </member>
        <member name="P:GifComponents.Components.GifComponent.DebugXmlReader">
            <summary>
            Gets the XML which provides insight into how the GIF stream or 
            component was interpreted by this library.
            For debugging use if the GIF stream cannot be decoded.
            </summary>
        </member>
        <member name="P:GifComponents.Components.GifComponent.XmlDebugging">
            <summary>
            Gets a value indicating whether or not this component builds an xml
            document during decoding for debugging purposes.
            </summary>
        </member>
        <member name="M:GifComponents.Components.ApplicationExtension.#ctor(GifComponents.Components.DataBlock,System.Collections.ObjectModel.Collection{GifComponents.Components.DataBlock})">
            <summary>
            Constructor.
            </summary>
            <param name="identificationBlock">
            Sets the <see cref="P:GifComponents.Components.ApplicationExtension.IdentificationBlock"/>
            </param>
            <param name="applicationData">
            Sets the <see cref="P:GifComponents.Components.ApplicationExtension.ApplicationData"/>
            </param>
        </member>
        <member name="M:GifComponents.Components.ApplicationExtension.#ctor(System.IO.Stream)">
            <summary>
            Reads and returns an application extension from the supplied input 
            stream.
            </summary>
            <param name="inputStream">
            The input stream to read.
            </param>
        </member>
        <member name="M:GifComponents.Components.ApplicationExtension.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Reads and returns an application extension from the supplied input 
            stream.
            </summary>
            <param name="inputStream">
            The input stream to read.
            </param>
            <param name="xmlDebugging">Whether or not to create debug XML</param>
        </member>
        <member name="M:GifComponents.Components.ApplicationExtension.WriteToStream(System.IO.Stream)">
            <summary>
            Writes this component to the supplied output stream.
            </summary>
            <param name="outputStream">
            The output stream to write to.
            </param>
        </member>
        <member name="P:GifComponents.Components.ApplicationExtension.IdentificationBlock">
            <summary>
            Returns a data block which identifies the application defining this 
            extension.
            </summary>
        </member>
        <member name="P:GifComponents.Components.ApplicationExtension.ApplicationIdentifier">
            <summary>
            Sequence of eight printable ASCII characters used to identify the 
            application owning the Application Extension.
            </summary>
        </member>
        <member name="P:GifComponents.Components.ApplicationExtension.ApplicationAuthenticationCode">
            <summary>
            Sequence of three bytes used to authenticate the Application 
            Identifier. 
            An Application program may use an algorithm to compute a binary 
            code that uniquely identifies it as the application owning the 
            Application Extension.
            </summary>
        </member>
        <member name="P:GifComponents.Components.ApplicationExtension.ApplicationData">
            <summary>
            Data specific to the application declared by the 
            <see cref="P:GifComponents.Components.ApplicationExtension.ApplicationIdentifier"/>
            </summary>
        </member>
        <member name="M:GifComponents.Components.NetscapeExtension.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="repeatCount">
            Number of times to repeat the animation.
            0 to repeat indefinitely, -1 to not repeat.
            </param>
        </member>
        <member name="M:GifComponents.Components.NetscapeExtension.#ctor(GifComponents.Components.ApplicationExtension)">
            <summary>
            Constructor.
            </summary>
            <param name="applicationExtension">
            The application extension to build the Netscape extension from.
            </param>
        </member>
        <member name="P:GifComponents.Components.NetscapeExtension.LoopCount">
            <summary>
            Number of times to repeat the frames of the animation.
            0 to repeat indefinitely.
            </summary>
        </member>
        <member name="T:GifComponents.GifDecoder">
             <summary>
             Class GifDecoder - Decodes a GIF file into one or more frames and 
             exposes its properties, components and any error states.
             
             No copyright asserted on the source code of this class.  May be used for
             any purpose, however, refer to the Unisys LZW patent for any additional
             restrictions.  Please forward any corrections to kweiner@fmsware.com.
            
             @author Kevin Weiner, FM Software; LZW decoder adapted from John 
             	Cristy's ImageMagick.
             @version 1.03 November 2003
             
             Modified by Simon Bridewell, June 2009 - March 2010:
             Downloaded from 
             http://www.thinkedge.com/blogengine/post/2008/02/20/Animated-GIF-Encoder-for-NET-Update.aspx
             http://www.thinkedge.com/BlogEngine/file.axd?file=NGif_src2.zip
             
             1. Adapted for FxCop code analysis compliance and documentation 
             	comments converted to .net XML comments.
             2. Added comments relating the properties to data items specified in
             	http://www.w3.org/Graphics/GIF/spec-gif89a.txt
             3. Added property getters to expose the components of the GIF file.
             4. Refactored large amounts of functionality into separate classes
             	which encapsulate the types of the components of a GIF file.
             5. Removed all private declarations which are not components of a GIF
             	file.
             6. Added State property to indicate whether decoding is not started,
             	in progress or complete.
             7. Added StreamLength and StreamPosition properties.
             8. Added progress counters for use with LongRunningProcess and 
                ResponsiveForm.
             </summary>
        </member>
        <member name="F:GifComponents.GifDecoder._header">
            <summary>
            The header of the GIF file.
            </summary>
        </member>
        <member name="F:GifComponents.GifDecoder._lsd">
            <summary>
            The Logical Screen Descriptor contains the parameters necessary to 
            define the area of the display device within which the images will 
            be rendered.
            The coordinates in this block are given with respect to the 
            top-left corner of the virtual screen; they do not necessarily 
            refer to absolute coordinates on the display device.
            This implies that they could refer to window coordinates in a 
            window-based environment or printer coordinates when a printer is 
            used. 
            This block is REQUIRED; exactly one Logical Screen Descriptor must be
            present per Data Stream.
            </summary>
        </member>
        <member name="F:GifComponents.GifDecoder._gct">
            <summary>
            The global colour table, if present.
            </summary>
        </member>
        <member name="F:GifComponents.GifDecoder._netscapeExtension">
            <summary>
            Netscape extension, if present
            </summary>
        </member>
        <member name="F:GifComponents.GifDecoder._applicationExtensions">
            <summary>
            Collection of the application extensions in the file.
            </summary>
        </member>
        <member name="F:GifComponents.GifDecoder._frames">
            <summary>
            The frames which make up the GIF file.
            </summary>
        </member>
        <member name="F:GifComponents.GifDecoder._readStreamCounterText">
            <summary>
            Text to appear on a progress counter.
            </summary>
        </member>
        <member name="F:GifComponents.GifDecoder._state">
            <summary>
            An enum indicating whether the decoder has not started, is in 
            progress, or has finished.
            </summary>
        </member>
        <member name="F:GifComponents.GifDecoder._stream">
            <summary>
            Holds the <see cref="T:System.IO.Stream"/> from which the GIF is being
            read.
            </summary>
        </member>
        <member name="M:GifComponents.GifDecoder.#ctor(System.String)">
            <summary>
            Reads a GIF file from specified file/URL source  
            (URL assumed if name contains ":/" or "file:")
            </summary>
            <param name="fileName">
            Path or URL of image file.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The supplied filename is null.
            </exception>
        </member>
        <member name="M:GifComponents.GifDecoder.#ctor(System.String,System.Boolean)">
            <summary>
            Reads a GIF file from specified file/URL source  
            (URL assumed if name contains ":/" or "file:")
            </summary>
            <param name="fileName">
            Path or URL of image file.
            </param>
            <param name="xmlDebugging">
            A boolean value indicating whether or not an XML document should be 
            created showing how the GIF stream was decoded.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The supplied filename is null.
            </exception>
        </member>
        <member name="M:GifComponents.GifDecoder.#ctor(System.IO.Stream)">
            <summary>
            Reads a GIF file from the specified stream.
            </summary>
            <param name="inputStream">
            A stream to read the GIF data from.
            </param>
        </member>
        <member name="M:GifComponents.GifDecoder.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Reads a GIF file from the specified stream.
            </summary>
            <param name="inputStream">
            A stream to read the GIF data from.
            </param>
            <param name="xmlDebugging">
            A boolean value indicating whether or not an XML document should be 
            created showing how the GIF stream was decoded.
            </param>
        </member>
        <member name="M:GifComponents.GifDecoder.Decode">
            <summary>
            Decodes the supplied GIF stream.
            </summary>
        </member>
        <member name="M:GifComponents.GifDecoder.ReadStream(System.IO.Stream)">
            <summary>
            Reads GIF image from stream
            </summary>
            <param name="inputStream">
            Stream containing GIF file.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The supplied stream is null.
            </exception>
        </member>
        <member name="M:GifComponents.GifDecoder.ReadContents(System.IO.Stream)">
            <summary>
            Main file parser. Reads GIF content blocks.
            </summary>
            <param name="inputStream">
            Input stream from which the GIF data is to be read.
            </param>
        </member>
        <member name="M:GifComponents.GifDecoder.AddFrame(System.IO.Stream,GifComponents.Components.GraphicControlExtension)">
            <summary>
            Reads a frame from the input stream and adds it to the collection
            of frames.
            </summary>
            <param name="inputStream">
            Input stream from which the frame is to be read.
            </param>
            <param name="lastGce">
            The graphic control extension most recently read from the input
            stream.
            </param>
        </member>
        <member name="M:GifComponents.GifDecoder.WriteToStream(System.IO.Stream)">
            <summary>
            Throws a NotSupportedException.
            GifDecoders are only intended to read from, and decode streams, not 
            to write to them.
            </summary>
            <param name="outputStream">
            The output stream to write to.
            </param>
        </member>
        <member name="P:GifComponents.GifDecoder.Header">
            <summary>
            Gets the header of the GIF stream, containing the signature and
            version of the GIF standard used.
            </summary>
        </member>
        <member name="P:GifComponents.GifDecoder.LogicalScreenDescriptor">
            <summary>
            Gets the logical screen descriptor.
            </summary>
            <remarks>
            The Logical Screen Descriptor contains the parameters necessary to 
            define the area of the display device within which the images will 
            be rendered.
            The coordinates in this block are given with respect to the 
            top-left corner of the virtual screen; they do not necessarily 
            refer to absolute coordinates on the display device.
            This implies that they could refer to window coordinates in a 
            window-based environment or printer coordinates when a printer is 
            used.
            </remarks>
        </member>
        <member name="P:GifComponents.GifDecoder.BackgroundColour">
            <summary>
            Gets the background colour.
            </summary>
        </member>
        <member name="P:GifComponents.GifDecoder.ApplicationExtensions">
            <summary>
            Gets the application extensions contained within the GIF stream.
            This is an array rather than a property because it looks better in
            a property sheet control.
            </summary>
        </member>
        <member name="P:GifComponents.GifDecoder.NetscapeExtension">
            <summary>
            Gets the Netscape 2.0 application extension, if present.
            This contains the animation's loop count.
            </summary>
        </member>
        <member name="P:GifComponents.GifDecoder.Frames">
            <summary>
            Gets the frames of the GIF file.
            </summary>
        </member>
        <member name="P:GifComponents.GifDecoder.GlobalColourTable">
            <summary>
            Gets the global colour table for this GIF data stream.
            </summary>
        </member>
        <member name="P:GifComponents.GifDecoder.StreamLength">
            <summary>
            Gets the length, in bytes, of the stream being decoder.
            </summary>
        </member>
        <member name="P:GifComponents.GifDecoder.StreamPosition">
            <summary>
            Gets the current position in the stream being decoded.
            </summary>
        </member>
        <member name="P:GifComponents.GifDecoder.State">
            <summary>
            Gets one of the GifDecoderState values indicating whether the 
            GifDecoder has not started, is in progress, or has finished decoding.
            </summary>
        </member>
        <member name="T:GifComponents.ColourTableStrategy">
            <summary>
            Enumeration of strategies for including colour tables when encoding 
            a GIF file.
            </summary>
        </member>
        <member name="F:GifComponents.ColourTableStrategy.UseLocal">
            <summary>
            Add a local colour table to every frame. No global colour table.
            </summary>
        </member>
        <member name="F:GifComponents.ColourTableStrategy.UseGlobal">
            <summary>
            Use a global colour table for all frames.
            </summary>
        </member>
        <member name="T:GifComponents.Tools.PixelAnalysis">
            <summary>
            PixelAnalysis wraps various classes for quantizing images (i.e. changing
            their colour palettes so that a maximum of 256 colours is used).
            The input is an image or collection of images, a quantization colour
            quality (applicable only when NeuQuant is the quantization method),
            and a quantizer type indicating the class which performs the actual
            quantization.
            The output is a <see cref="P:GifComponents.Tools.PixelAnalysis.ColourTable"/> containing all the colours 
            from the quantized image(s), and a collection of indices into that
            colour table indicating the colours of each of the pixels in the 
            supplied image(s), both suitable for use by the 
            <see cref="T:GifComponents.AnimatedGifEncoder"/>.
            </summary>
        </member>
        <member name="M:GifComponents.Tools.PixelAnalysis.#ctor(System.Drawing.Image,GifComponents.QuantizerType)">
            <summary>
            Constructor.
            Be sure to call the Analyse method after calling the constructor.
            </summary>
            <param name="imageToStudy">
            The image containing the pixels to be analyzed.
            </param>
            <param name="quantizerType">
            The type of object to use to quantize the image to 255 colours.
            </param>
            <exception cref="T:System.ArgumentException">
            The supplied quantizer type is not valid.
            </exception>
        </member>
        <member name="M:GifComponents.Tools.PixelAnalysis.#ctor(System.Collections.ObjectModel.Collection{System.Drawing.Image})">
            <summary>
            Constructor.
            Be sure to call the Analyse method after calling the constructor.
            </summary>
            <param name="imagesToStudy">
            The images for which to analyse the pixels.
            </param>
        </member>
        <member name="M:GifComponents.Tools.PixelAnalysis.Analyse">
            <summary>
            Call this method after instantiating the PixelAnalysis to perform
            the analysis and make the colour table and indexed pixels properties
            available.
            </summary>
        </member>
        <member name="M:GifComponents.Tools.PixelAnalysis.CreateColourTableUsingNeuQuant(System.Int32)">
            <summary>
            Calculates the colour table needed to index the supplied pixels.
            </summary>
            <param name="colourQuantizationQuality">
            Sets quality of color quantization (conversion of images
            to the maximum 256 colors allowed by the GIF specification).
            Lower values (minimum = 1) produce better colors, but slow
            processing significantly.  10 is the default, and produces
            good color mapping at reasonable speeds.  Values greater
            than 20 do not yield significant improvements in speed.
            Defaults to 1 if not greater than zero.
            </param>
        </member>
        <member name="M:GifComponents.Tools.PixelAnalysis.CreateDirectColourTable">
            <summary>
            Creates a colour table directly from the distinct colours in the
            supplied image(s).
            </summary>
        </member>
        <member name="M:GifComponents.Tools.PixelAnalysis.GetIndexedPixels(System.Drawing.Color[])">
            <summary>
            Gets the indices of the colours of each of the supplied pixels 
            within the colour table.
            </summary>
            <param name="pixelColours">
            A collection of the colours for which to get the indices in the 
            colour table.
            </param>
            <returns>
            A collection of the indices of the colours of each of the supplied 
            pixels within the colour table.
            </returns>
        </member>
        <member name="M:GifComponents.Tools.PixelAnalysis.GetColours(System.Drawing.Image)">
            <summary>
            Stores the colours of each of the pixels in the supplied image in
            the _imageColours array.
            </summary>
            <param name="image">The image to examine</param>
        </member>
        <member name="F:GifComponents.Tools.PixelAnalysis._disposed">
            <summary>
            Indicates whether or not the Dispose( bool ) method has already been 
            called.
            </summary>
        </member>
        <member name="M:GifComponents.Tools.PixelAnalysis.Finalize">
            <summary>
            Finalzer.
            </summary>
        </member>
        <member name="M:GifComponents.Tools.PixelAnalysis.Dispose">
            <summary>
            Disposes resources used by this class.
            </summary>
        </member>
        <member name="M:GifComponents.Tools.PixelAnalysis.Dispose(System.Boolean)">
            <summary>
            Disposes resources used by this class.
            </summary>
            <param name="disposing">
            Indicates whether this method is being called by the class's Dispose
            method (true) or by the garbage collector (false).
            </param>
        </member>
        <member name="P:GifComponents.Tools.PixelAnalysis.ColourQuality">
            <summary>
            Gets and sets quality of color quantization (conversion of images
            to the maximum 256 colors allowed by the GIF specification).
            Lower values (minimum = 1) produce better colors, but slow
            processing significantly.  10 is the default, and produces
            good color mapping at reasonable speeds.  Values greater
            than 20 do not yield significant improvements in speed.
            Defaults to 1 if not greater than zero.
            Only used if the quantizer type is set to NeuQuant.
            </summary>
        </member>
        <member name="P:GifComponents.Tools.PixelAnalysis.ColourTable">
            <summary>
            Gets a collection colours which includes the colours of all the 
            supplied pixels.
            </summary>
        </member>
        <member name="P:GifComponents.Tools.PixelAnalysis.IndexedPixels">
            <summary>
            Gets the indices within the colour table of the colours of each of 
            the pixels in the supplied image.
            </summary>
        </member>
        <member name="P:GifComponents.Tools.PixelAnalysis.IndexedPixelsCollection">
            <summary>
            Gets a collection of the indices within the colour table of the 
            colours of each of the pixels in the supplied images.
            </summary>
        </member>
        <member name="P:GifComponents.Tools.PixelAnalysis.NeuQuant">
            <summary>
            Gets the neural net quantizer used to quantize images
            </summary>
        </member>
        <member name="P:GifComponents.Tools.PixelAnalysis.OctreeQuantizer">
            <summary>
            Gets the octree quantizer used to quantize images.
            </summary>
        </member>
        <member name="T:GifComponents.Tools.OctreeNode">
            <summary>
            Class which encapsulates each node in an Octree.
            Based on code downloaded from 
            http://msdn.microsoft.com/en-us/library/aa479306.aspx
            
            Amended by Simon Bridewell, November-December 2009:
            	* Moved out of OctreeQuantizer.cs into its own file
            	* Changed various access modifiers to internal
            	* Small edits to XML comments
            	* Changed namespace to GifComponents
            	* Fixed / suppressed some FxCop warnings
            	* Style changes (e.g. add missing curly brackets around conditional 
            	  blocks)
            	* Added null argument test to constructor and ConstructPalette method
            	* Added ToString method.
            </summary>
        </member>
        <member name="F:GifComponents.Tools.OctreeNode.mask">
            <summary>
            Mask used when getting the appropriate pixels for a given node
            </summary>
        </member>
        <member name="F:GifComponents.Tools.OctreeNode._leaf">
            <summary>
            Flag indicating that this is a leaf node
            </summary>
        </member>
        <member name="F:GifComponents.Tools.OctreeNode._pixelCount">
            <summary>
            Number of pixels in this node
            </summary>
        </member>
        <member name="F:GifComponents.Tools.OctreeNode._red">
            <summary>
            Red component
            </summary>
        </member>
        <member name="F:GifComponents.Tools.OctreeNode._green">
            <summary>
            Green Component
            </summary>
        </member>
        <member name="F:GifComponents.Tools.OctreeNode._blue">
            <summary>
            Blue component
            </summary>
        </member>
        <member name="F:GifComponents.Tools.OctreeNode._children">
            <summary>
            Pointers to any child nodes
            </summary>
        </member>
        <member name="F:GifComponents.Tools.OctreeNode._nextReducible">
            <summary>
            Pointer to next reducible node
            </summary>
        </member>
        <member name="F:GifComponents.Tools.OctreeNode._paletteIndex">
            <summary>
            The index of this node in the palette
            </summary>
        </member>
        <member name="M:GifComponents.Tools.OctreeNode.#ctor(System.Int32,System.Int32,GifComponents.Tools.Octree)">
            <summary>
            Construct the node
            </summary>
            <param name="level">The level in the tree = 0 - 7</param>
            <param name="colourBits">
            The number of significant color bits in the image
            </param>
            <param name="octree">
            The tree to which this node belongs
            </param>
        </member>
        <member name="M:GifComponents.Tools.OctreeNode.AddColour(GifComponents.Tools.Colour32*,System.Int32,System.Int32,GifComponents.Tools.Octree)">
            <summary>
            Add a color into the tree
            </summary>
            <param name="pixel">The color</param>
            <param name="colourBits">The number of significant color bits</param>
            <param name="level">The level in the tree</param>
            <param name="octree">The tree to which this node belongs</param>
        </member>
        <member name="M:GifComponents.Tools.OctreeNode.Reduce">
            <summary>
            Reduce this node by removing all of its children
            </summary>
            <returns>The number of leaves removed</returns>
        </member>
        <member name="M:GifComponents.Tools.OctreeNode.ConstructPalette(System.Collections.ArrayList,System.Int32@)">
            <summary>
            Traverse the tree, building up the color palette
            </summary>
            <param name="palette">The palette</param>
            <param name="paletteIndex">The current palette index</param>
        </member>
        <member name="M:GifComponents.Tools.OctreeNode.GetPaletteIndex(GifComponents.Tools.Colour32*,System.Int32)">
            <summary>
            Return the palette index for the passed color
            </summary>
        </member>
        <member name="M:GifComponents.Tools.OctreeNode.Increment(GifComponents.Tools.Colour32*)">
            <summary>
            Increment the pixel count and add to the color information
            </summary>
        </member>
        <member name="P:GifComponents.Tools.OctreeNode.NextReducible">
            <summary>
            Get/Set the next reducible node
            </summary>
        </member>
        <member name="P:GifComponents.Tools.OctreeNode.Children">
            <summary>
            Return the child nodes
            </summary>
        </member>
        <member name="T:GifComponents.AnimatedGifEncoder">
            <summary>
            TODO: remove support for transparency until it's understood better?
            Class AnimatedGifEncoder - Encodes a GIF file consisting of one or
            more frames.
            Instantiate the encoder using the constructor, call the AddFrame to add
            as many GifFrames as desired, then call the WriteToStream or WriteToFile
            method to create the animation.
            
            No copyright asserted on the source code of this class.  May be used
            for any purpose, however, refer to the Unisys LZW patent for restrictions
            on use of the associated LZWEncoder class.  Please forward any corrections
            to kweiner@fmsware.com.
            
            @author Kevin Weiner, FM Software
            @version 1.03 November 2003
            
            Modified by Phil Garcia (phil@thinkedge.com) 
            	1. Add support to output the Gif to a MemoryStream (9/2/2005)
            
            Modified by Simon Bridewell, June 2009 - April 2010:
            Downloaded from 
            http://www.thinkedge.com/BlogEngine/file.axd?file=NGif_src2.zip
            	* Corrected FxCop code analysis errors.
            	* Documentation comments converted to .net XML comments.
            	* Refactored so that all properties are set in the constructor.
            	* Writing of GIF components to the output stream delegated to the 
            	  classes for those components.
            	* Added option to use a global colour table instead of local colour tables.
            	* Added support for colour tables with fewer than 256 colours
            	* Colour quantization only performed for animations with more than 
            	  256 colours.
            	* User can now supply their own palette as a global or local colour
            	  table.
            	* New QuantizerType property - allows user to choose between NeuQuant
            	  and Octree quantizers.
            	* Add ProgressCounters to allow UI to provide feedback to the user.
            </summary>
        </member>
        <member name="F:GifComponents.AnimatedGifEncoder._frames">
            <summary>
            The frames which make up the animation/
            </summary>
        </member>
        <member name="F:GifComponents.AnimatedGifEncoder._strategy">
            <summary>
            The ColourTableStrategy indicating whether a global colour table
            or local colour tables should be used.
            </summary>
        </member>
        <member name="F:GifComponents.AnimatedGifEncoder._globalColourTable">
            <summary>
            The global colour table, if used.
            </summary>
        </member>
        <member name="F:GifComponents.AnimatedGifEncoder._logicalScreenSize">
            <summary>
            Size, in pixels, of the animated GIF file.
            </summary>
        </member>
        <member name="F:GifComponents.AnimatedGifEncoder._repeatCount">
            <summary>
            The number of times to repeat the animation.
            0 to repeat indefinitely.
            -1 to not repeat.
            </summary>
        </member>
        <member name="F:GifComponents.AnimatedGifEncoder._quality">
            <summary>
            Quality of color quantization (conversion of images to the maximum 
            256 colors allowed by the GIF specification).
            Lower values (minimum = 1) produce better colors, but slow 
            processing significantly.
            10 is the default, and produces good color mapping at reasonable 
            speeds.
            Values greater than 20 do not yield significant improvements in 
            speed.
            </summary>
        </member>
        <member name="F:GifComponents.AnimatedGifEncoder._quantizerType">
            <summary>
            Indicates the type of quantizer used to reduce the colour palette
            to 256 colours.
            </summary>
        </member>
        <member name="M:GifComponents.AnimatedGifEncoder.#ctor">
            <summary>
            Default constructor.
            Sets repeat count to 0 (repeat indefinitely)
            Sets colour table strategy to UseGlobal
            Sets image quantization quality to 10.
            Sets quantizer type to NeuQuant.
            Screen size defaults to size of first frame.
            </summary>
        </member>
        <member name="M:GifComponents.AnimatedGifEncoder.WriteToFile(System.String)">
            <summary>
            Writes an animated GIF file to the supplied file name.
            </summary>
            <param name="fileName">
            The file to write the animation to.
            </param>
        </member>
        <member name="M:GifComponents.AnimatedGifEncoder.WriteToStream(System.IO.Stream)">
            <summary>
            Writes the GIF animation to the supplied stream.
            </summary>
            <param name="outputStream">
            The stream to write the animation to.
            </param>
        </member>
        <member name="M:GifComponents.AnimatedGifEncoder.AddFrame(GifComponents.GifFrame)">
            <summary>
            Adds a frame to the animation.
            </summary>
            <param name="frame">
            The frame to add to the animation.
            </param>
        </member>
        <member name="M:GifComponents.AnimatedGifEncoder.FindClosest(System.Drawing.Color,GifComponents.Components.ColourTable)">
            <summary>
            Returns the index within the supplied colour table of the colour 
            closest to the supplied colour.
            </summary>
            <param name="colourToFind">
            The colour to find the closest match for.
            </param>
            <param name="colourTable">
            The active colour table.
            </param>
            <returns>
            Returns -1 if the supplied colour is null.
            </returns>
        </member>
        <member name="M:GifComponents.AnimatedGifEncoder.MakeIndexedPixels(GifComponents.Components.ColourTable,System.Drawing.Image)">
            <summary>
            Converts the supplied image to a collection of pixel indices using
            the supplied colour table.
            Only used when the QuantizerType is set to UseSuppliedPalette
            </summary>
            <param name="act">The active colour table</param>
            <param name="image">The image</param>
            <returns></returns>
        </member>
        <member name="M:GifComponents.AnimatedGifEncoder.WriteGraphicCtrlExt(GifComponents.GifFrame,System.Int32,System.IO.Stream)">
            <summary>
            Writes a Graphic Control Extension to the supplied output stream.
            </summary>
            <param name="frame">
            The GifFrame to which this graphic control extension relates.
            </param>
            <param name="transparentColourIndex">
            The index within the active colour table of the transparent colour.
            </param>
            <param name="outputStream">
            The stream to write to.
            </param>
        </member>
        <member name="M:GifComponents.AnimatedGifEncoder.WriteImageDescriptor(System.Drawing.Size,System.Drawing.Point,GifComponents.Components.ColourTable,System.IO.Stream)">
            <summary>
            Writes an image descriptor to the supplied stream.
            </summary>
            <param name="imageSize">
            The size, in pixels, of the image in this frame.
            </param>
            <param name="position">
            The position of this image within the logical screen.
            </param>
            <param name="localColourTable">
            The local colour table for this frame.
            Supply null if the global colour table is to be used for this frame.
            </param>
            <param name="outputStream">
            The stream to write to.
            </param>
        </member>
        <member name="M:GifComponents.AnimatedGifEncoder.WriteLogicalScreenDescriptor(System.IO.Stream)">
            <summary>
            Writes a Logical Screen Descriptor to the supplied stream.
            Also writes a global colour table if required.
            </summary>
            <param name="outputStream">
            The stream to write to.
            </param>
        </member>
        <member name="M:GifComponents.AnimatedGifEncoder.WriteNetscapeExtension(System.IO.Stream)">
            <summary>
            Writes a Netscape application extension defining the repeat count
            to the supplied output stream, if the repeat count is greater than
            or equal to zero.
            </summary>
            <param name="outputStream">
            The stream to write to.
            </param>
        </member>
        <member name="M:GifComponents.AnimatedGifEncoder.WritePixels(GifComponents.IndexedPixels,System.IO.Stream)">
            <summary>
            Encodes and writes pixel data to the supplied stream
            </summary>
            <param name="indexedPixels">
            Collection of indices of the pixel colours within the active colour 
            table.
            </param>
            <param name="outputStream">
            The stream to write to.
            </param>
        </member>
        <member name="P:GifComponents.AnimatedGifEncoder.Frames">
            <summary>
            Gets a collection of the GifFrames which make up the animation.
            </summary>
        </member>
        <member name="P:GifComponents.AnimatedGifEncoder.Transparent">
            <summary>
            Gets and sets the transparent color for the next added frame and 
            any subsequent frames.
            Since all colors are subject to modification in the quantization 
            process, the color in the final palette for each frame closest to 
            the given color becomes the transparent color for that frame.
            May be set to Color.Empty to indicate no transparent color.
            </summary>
        </member>
        <member name="P:GifComponents.AnimatedGifEncoder.ColourTableStrategy">
            <summary>
            Indicates whether the animation will contain a single global colour
            table for all frames (UseGlobal) or a local colour table for each
            frame (UseLocal)
            </summary>
        </member>
        <member name="P:GifComponents.AnimatedGifEncoder.RepeatCount">
            <summary>
            The number of times to repeat the animation.
            0 to repeat indefinitely.
            -1 to not repeat.
            Defaults to -1 if less than -1.
            </summary>
        </member>
        <member name="P:GifComponents.AnimatedGifEncoder.SamplingFactor">
            <summary>
            Sets the proportion of pixels in the input image to be examined
            when quantizing the image.
            Set to 1 to examine every pixel for better colour quality but slow
            processing.
            Set to 10 to examine one in 10 of the pixels for faster processing
            but poorer image quality.
            Only applicable if input image has more than 256 colours and the
            QuantizerType is set to NeuQuant.
            </summary>
        </member>
        <member name="P:GifComponents.AnimatedGifEncoder.LogicalScreenSize">
            <summary>
            The size, in pixels, of the animated GIF file.
            If this property is not set before the animation is encoder, the 
            size of the first frame to be added will be used.
            </summary>
        </member>
        <member name="P:GifComponents.AnimatedGifEncoder.QuantizerType">
            <summary>
            Gets and sets the type of quantizer used to reduce the colour
            palette to 256 colours, if required.
            </summary>
        </member>
        <member name="P:GifComponents.AnimatedGifEncoder.Palette">
            <summary>
            Gets and sets a user-defined palette to use as a global colour table.
            When setting this property, the ColourTableStrategy property is set
            to UseGlobal, and the QuantizerType property is set to 
            UseSuppliedPalette.
            </summary>
        </member>
        <member name="P:GifComponents.AnimatedGifEncoder.PixelAnalysis">
            <summary>
            Gets the PixelAnalyis used to quantize the images
            </summary>
        </member>
        <member name="T:GifComponents.Tools.Octree">
            <summary>
            Class which does the actual quantization.
            Based on code downloaded from 
            http://msdn.microsoft.com/en-us/library/aa479306.aspx
            
            Amended by Simon Bridewell, November-December 2009:
            	* Moved out of OctreeQuantizer.cs into its own file
            	* Changed class access modifier from private to public and marked 
            	  as unsafe
            	* Small edits to XML comments
            	* Changed namespace to GifComponents
            	* Fixed / suppressed some FxCop warnings
            	* Style changes (e.g. add missing curly brackets around conditional 
            	  blocks)
            	* Changed various access modifiers to internal
            	* Moved mask ino OctreeNode.cs
            	* Added ToString method.
            </summary>
        </member>
        <member name="F:GifComponents.Tools.Octree._root">
            <summary>
            The root of the octree
            </summary>
        </member>
        <member name="F:GifComponents.Tools.Octree._leafCount">
            <summary>
            Number of leaves in the tree
            </summary>
        </member>
        <member name="F:GifComponents.Tools.Octree._reducibleNodes">
            <summary>
            Array of reducible nodes
            </summary>
        </member>
        <member name="F:GifComponents.Tools.Octree._maxColorBits">
            <summary>
            Maximum number of significant bits in the image
            </summary>
        </member>
        <member name="F:GifComponents.Tools.Octree._previousNode">
            <summary>
            Store the last node quantized
            </summary>
        </member>
        <member name="F:GifComponents.Tools.Octree._previousColor">
            <summary>
            Cache the previous color quantized
            </summary>
        </member>
        <member name="M:GifComponents.Tools.Octree.#ctor(System.Int32)">
            <summary>
            Construct the octree
            </summary>
            <param name="maxColourBits">
            The maximum number of significant bits in the image
            </param>
        </member>
        <member name="M:GifComponents.Tools.Octree.AddColour(GifComponents.Tools.Colour32*)">
            <summary>
            Add a given color value to the octree
            </summary>
            <param name="pixel">The colour to add</param>
        </member>
        <member name="M:GifComponents.Tools.Octree.Reduce">
            <summary>
            Reduce the depth of the tree
            </summary>
        </member>
        <member name="M:GifComponents.Tools.Octree.Palletize(System.Int32)">
            <summary>
            Convert the nodes in the octree to a palette with a maximum of 
            colorCount colors
            </summary>
            <param name="colourCount">The maximum number of colours</param>
            <returns>An arraylist with the palettized colours</returns>
        </member>
        <member name="M:GifComponents.Tools.Octree.GetPaletteIndex(GifComponents.Tools.Colour32*)">
            <summary>
            Get the palette index for the passed color
            </summary>
            <param name="pixel"></param>
            <returns></returns>
        </member>
        <member name="M:GifComponents.Tools.Octree.TrackPrevious(GifComponents.Tools.OctreeNode)">
            <summary>
            Keep track of the previous node that was quantized
            </summary>
            <param name="node">The node last quantized</param>
        </member>
        <member name="P:GifComponents.Tools.Octree.Leaves">
            <summary>
            Get/Set the number of leaves in the tree
            </summary>
        </member>
        <member name="P:GifComponents.Tools.Octree.ReducibleNodes">
            <summary>
            Return the array of reducible nodes
            </summary>
        </member>
        <member name="P:GifComponents.Tools.Octree.Root">
            <summary>
            Gets the root node of this Octree.
            </summary>
        </member>
        <member name="T:GifComponents.Tools.NeuQuant">
             <summary>
             NeuQuant Neural-Net Quantization Algorithm
             ------------------------------------------
             
             Copyright (c) 1994 Anthony Dekker
             
             NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994.
             See "Kohonen neural networks for optimal colour quantization"
             in "Network: Computation in Neural Systems" Vol. 5 (1994) pp 351-367.
             for a discussion of the algorithm.
             
             http://members.ozemail.com.au/~dekker/NeuQuant.pdf
             
             Any party obtaining a copy of these files from the author, directly or
             indirectly, is granted, free of charge, a full and unrestricted irrevocable,
             world-wide, paid up, royalty-free, nonexclusive right and license to deal
             in this software and documentation files (the "Software"), including without
             limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
             and/or sell copies of the Software, and to permit persons who receive
             copies from any such party to do so, with the only requirement being
             that this copyright notice remain intact.
            
             Ported to Java 12/00 K Weiner
             
             Modified by Simon Bridewell, June 2009 - April 2010:
             Downloaded from 
             http://www.thinkedge.com/BlogEngine/file.axd?file=NGif_src2.zip
             * Adapted for FxCop code analysis compliance and documentation comments 
               converted to .net XML comments.
             * Removed "len" parameter from constructor.
             * Added AnalysingPixel property.
             * Made Learn, UnbiasNetwork and BuildIndex methods private.
             * Derive from LongRunningProcess to allow use of ProgressCounters.
             * Renamed lots of private members, local variables and methods.
             * Refactored some code into separate methods:
             	GetPixelIncrement
             	ManhattanDistance
             	MoveNeuron
             	MoveNeighbouringNeurons
             	MoveNeighbour
             	SetNeighbourhoodAlphas
             	IndexOfLeastGreenNeuron
             	SwapNeurons
             	SwapValues
             * Added lots of comments.
             TODO: consider a separate Neuron class - R, G, B, frequency and bias properties?
             TODO: consider a separate NeuralNetwork class, not specific to quantizing images
             TODO: consider an abstract Quantizer base class
             TODO: consider a NeuralNetworkParameters class to replace the constants defined here
             </summary>
        </member>
        <member name="F:GifComponents.Tools.NeuQuant._neuronCount">
            <summary>
            Number of neurons in the neural network
            -- or (in this implementation) --
            Maximum number of colours in the output image.
            </summary>
        </member>
        <member name="F:GifComponents.Tools.NeuQuant._minPictureBytes">
            <summary>
            Minimum size for input image.
            If the image has fewer pixels than this then the learning loop will
            step through its pixels 3 at a time rather than using one of the
            four prime constants, and the sample factor supplied to the 
            constructor will be overridden by a value of 1.
            </summary>
        </member>
        <member name="F:GifComponents.Tools.NeuQuant._highestNeuronIndex">
            <summary>
            Highest possible index for a neuron in the neural network
            (the network is a zero-based array).
            </summary>
        </member>
        <member name="F:GifComponents.Tools.NeuQuant._netBiasShift">
            <summary>
            Bias for colour values.
            Controls the relationship between actual colour intensities (0 to 
            255) and the colour values held in the network's neurons. 
            The larger this value, the larger the values held in the neurons 
            will be in comparison to the actual colour intensities.
            </summary>
        </member>
        <member name="F:GifComponents.Tools.NeuQuant._numberOfLearningCycles">
            <summary>
            Number of learning cycles. The greater this value, the more often
            the alpha values used to move neurons will be decremented.
            </summary>
        </member>
        <member name="F:GifComponents.Tools.NeuQuant._intBiasShift">
            <summary>
            The larger this value is, the larger _intbias will be.
            Larger values will also make the bias of a neuron a more significant
            factor than the distance from the supplied colour when identifying
            the best neuron for a given colour.
            </summary>
        </member>
        <member name="F:GifComponents.Tools.NeuQuant._intBias">
            <summary>
            The larger this value is, the higher the initial frequency will be
            for each neuron, and the more the bias and frequency of the closest
            neuron will be adjusted by during the learning loop.
            </summary>
        </member>
        <member name="F:GifComponents.Tools.NeuQuant._gammaShift">
            <summary>
            The larger this value is, the larger _beta will be.
            Larger values also result in the bias of all neurons being increased
            by a greater amount in each iteration through the learning process.
            </summary>
        </member>
        <member name="F:GifComponents.Tools.NeuQuant._betaShift">
            <summary>
            The larger this value is, the smaller 
            _closestNeuronFrequencyIncrement and _closestNeuronBiasDecrement 
            will be.
            This means that larger values will also result in the frequency of 
            all neurons being decreased by less and the bias being increased by 
            less at each step of the learning loop.
            </summary>
        </member>
        <member name="F:GifComponents.Tools.NeuQuant._closestNeuronFrequencyIncrement">
            <summary>
            The larger this value is, the more the frequency of the closest 
            neuron will be increased by during the learning loop.
            </summary>
            <remarks>This member was originally called _beta</remarks>
        </member>
        <member name="F:GifComponents.Tools.NeuQuant._closestNeuronBiasDecrement">
            <summary>
            The larger this value is, the more the bias of the closest neuron
            will be decreased by during the learning loop.
            </summary>
            <remarks>This member was originally called _betagamma</remarks>
        </member>
        <member name="F:GifComponents.Tools.NeuQuant._initialRadius">
            <summary>
            Initial radius.
            The initial unbiased neuron neighbourhood size is set to this 
            multiplied by the neighbourhood size bias.
            This is also the size of the array of alphas for shifting 
            neighbouring neurons.
            </summary>
        </member>
        <member name="F:GifComponents.Tools.NeuQuant._neighbourhoodSizeBiasShift">
            <summary>
            The neuron neighbourhood size is set by shifting the unbiased 
            neighbourhood size this many bits to the right.
            </summary>
        </member>
        <member name="F:GifComponents.Tools.NeuQuant._radiusBias">
            <summary>
            Raduis bias.
            The initial unbiased neuron neighbourhood size is set to this
            multiplied by the initial radius.
            </summary>
        </member>
        <member name="F:GifComponents.Tools.NeuQuant._initialUnbiasedNeighbourhoodSize">
            <summary>
            The initial value for the unbiased size of a neuron neighbourhood.
            </summary>
        </member>
        <member name="F:GifComponents.Tools.NeuQuant._unbiasedNeighbourhoodSizeDecrement">
            <summary>
            Factor for reducing the unbiased neighbourhood size.
            </summary>
        </member>
        <member name="F:GifComponents.Tools.NeuQuant._alphaBiasShift">
            <summary>
            The initial value of alpha will be set to 1, left shifted by this
            many bits.
            </summary>
        </member>
        <member name="F:GifComponents.Tools.NeuQuant._initialAlpha">
            <summary>
            The starting value of alpha.
            Alpha is a factor which controls how far neurons are moved during
            the learning loop, and it decreases as learning proceeds.
            </summary>
        </member>
        <member name="F:GifComponents.Tools.NeuQuant._radBiasShift">
            <summary>
            The greater this value, the greater _radBias and _alphaRadBiasShift
            will be.
            </summary>
        </member>
        <member name="F:GifComponents.Tools.NeuQuant._radBias">
            <summary>
            The greater this value, the larger alpha will be, and the more 
            neighbouring neurons will be moved by during the learning process.
            </summary>
        </member>
        <member name="F:GifComponents.Tools.NeuQuant._alphaRadBiasShift">
            <summary>
            The greater this value, the greater _alphaRadBias will be, and so
            the less neighbourint neurons will be moved by during the learning
            process.
            </summary>
        </member>
        <member name="F:GifComponents.Tools.NeuQuant._alphaRadBias">
            <summary>
            The greater this value, the less neighbouring neurons will be moved 
            by during the learning process.
            </summary>
        </member>
        <member name="F:GifComponents.Tools.NeuQuant._alphaDecrement">
            <summary>
            Controls how much alpha decreases by at each step of the learning
            loop - alpha will be decremented by alpha divided by this value, so
            the larger this value, the more slowly alpha will be reduced.
            </summary>
        </member>
        <member name="F:GifComponents.Tools.NeuQuant._thePicture">
            <summary>
            A collection of byte colour intensities, in the order red, green, 
            blue, representing the colours of each of the pixels in an image
            to be quantized.
            </summary>
        </member>
        <member name="F:GifComponents.Tools.NeuQuant._pixelCount">
            <summary>
            Number of pixels in the input image.
            </summary>
        </member>
        <member name="F:GifComponents.Tools.NeuQuant._samplingFactor">
            <summary>
            Sampling factor. Minimum of 1.
            Lower values mean more of the pixels of the image will be examined
            hence better image quality but slower processing.
            Higher values mean fewer of the pixels will be examined, so poorer
            image quality but faster processing.
            The larger _samplingFactor is, the fewer of the pixels in the input
            image will be examined, and the slower the value of alpha will be 
            reduced during the learning loop.
            </summary>
        </member>
        <member name="F:GifComponents.Tools.NeuQuant._network">
            <summary>
            The neural network used to quantize the image.
            This is a two-dimensional array, with each element of the first 
            dimension representing one of the colours in the colour table of 
            the quantized output image, and the elements of the second dimension 
            representing the blue, green and red components of those colours, 
            and the original index of the neuron in the network before the
            neurons are reordered in the BuildIndex method.
            </summary>
        </member>
        <member name="F:GifComponents.Tools.NeuQuant._indexOfGreen">
            <summary>
            Used for locating colours in the neural network - the index of this
            array is the green value of the colour to look for.
            </summary>
        </member>
        <member name="F:GifComponents.Tools.NeuQuant._bias">
            <summary>
            Array of biases for each neuron.
            For frequently chosen neurons this will be negative.
            </summary>
        </member>
        <member name="F:GifComponents.Tools.NeuQuant._frequency">
            <summary>
            Array indicating how frequently each neuron is chosen during the
            learning process as the closest neuron to a given colour.
            For frequently chosen neurons this will be high.
            </summary>
        </member>
        <member name="F:GifComponents.Tools.NeuQuant._neighbourhoodAlphas">
            <summary>
            Alpha values controlling how far towards a target colour any 
            neighbouring are moved.
            </summary>
        </member>
        <member name="M:GifComponents.Tools.NeuQuant.#ctor(System.Byte[],System.Int32)">
            <summary>
            Constructor.
            Initialise network in range (0,0,0) to (255,255,255) and set parameters
            TODO: consider accepting a collection / array of Colors instead of a byte array.
            </summary>
            <param name="thePicture">
            A collection of byte colour intensities, in the order red, green, 
            blue, representing the colours of each of the pixels in an image.
            </param>
            <param name="samplingFactor">
            Sampling factor. Minimum of 1.
            Lower values mean more of the pixels of the image will be examined
            hence better image quality but slower processing.
            Higher values mean fewer of the pixels will be examined, so poorer
            image quality but faster processing.
            Set to 1 to examine every pixel in the image.
            </param>
        </member>
        <member name="M:GifComponents.Tools.NeuQuant.Process">
            <summary>
            Calls the Learn, UnbiasNetwork and BuildIndex method and returns the
            ColourMap.
            </summary>
            <returns>
            The colour table containing the colours of the image after 
            quantization.
            </returns>
        </member>
        <member name="M:GifComponents.Tools.NeuQuant.Map(System.Int32,System.Int32,System.Int32)">
            <summary>
            Search for BGR values 0..255 (after net is unbiased) and return 
            the index in the colour table of the colour closest to the supplied
            colour.
            </summary>
            <param name="blue">
            The blue component of the input colour.
            </param>
            <param name="green">
            The green component of the input colour.
            </param>
            <param name="red">
            The red component of the input colour.
            </param>
            <returns>
            The index in the colour table of the colour closest to the supplied
            colour.
            </returns>
        </member>
        <member name="M:GifComponents.Tools.NeuQuant.Learn">
            <summary>
            Main Learning Loop
            </summary>
        </member>
        <member name="M:GifComponents.Tools.NeuQuant.SetNeighbourhoodAlphas(System.Int32,System.Int32)">
            <summary>
            Sets the alpha values for moving neighbouring neurons.
            </summary>
        </member>
        <member name="M:GifComponents.Tools.NeuQuant.GetPixelIndexIncrement">
            <summary>
            Calculates an increment to step through the pixels of the image, 
            such that all pixels will eventually be examined, but not 
            sequentially.
            This is required because the learning loop needs to examine the
            pixels in a psuedo-random order.
            </summary>
            <returns>The increment.</returns>
        </member>
        <member name="M:GifComponents.Tools.NeuQuant.FindClosestAndReturnBestNeuron(System.Int32,System.Int32,System.Int32)">
            <summary>
            Search for biased BGR values
            Finds the neuron which is closest to the supplied colour, increases
            its frequency and decreases its bias.
            Finds the best neuron (close to the supplied colour but not already
            chosen too many times) and returns its index in the neural network.
            </summary>
            <param name="blue">The blue component of the colour</param>
            <param name="green">The green component of the colour</param>
            <param name="red">The red component of the colour</param>
            <returns>
            The index in the neural network of a neuron which is close to the 
            supplied colour but which hasn't already been chosen too many times.
            </returns>
            <remarks>
            This method was originally called Contest.
            </remarks>
        </member>
        <member name="M:GifComponents.Tools.NeuQuant.ManhattanDistance(System.Int32[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates how close the colour represented by the supplied red,
            green and blue values is to the colour held in the supplied neuron.
            </summary>
            <param name="neuron">
            A neuron with blue, green and red values held in its first three
            elements.
            </param>
            <param name="red">The red intensity of the supplied colour</param>
            <param name="green">The green intensity of the supplied colour</param>
            <param name="blue">The blue intensity of the supplied colour</param>
            <returns>The distance between the two colours</returns>
        </member>
        <member name="M:GifComponents.Tools.NeuQuant.MoveNeuron(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves the neuron at the supplied index in the neural network closer
            to the target colour by a factor of alpha.
            </summary>
            <param name="alpha">
            The greater this parameter, the more the neuron will be moved in
            the direction of the target colour.
            </param>
            <param name="neuronIndex">
            Index in the neural network of the neuron to be moved.
            </param>
            <param name="blue">The blue component of the target colour</param>
            <param name="green">The green component of the target colour</param>
            <param name="red">The red component of the target colour</param>
            <remarks>This method was originally called Altersingle</remarks>
        </member>
        <member name="M:GifComponents.Tools.NeuQuant.MoveNeighbouringNeurons(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves neighbours of the neuron at the supplied index in the network
            closer to the supplied target colour.
            </summary>
            <param name="neighbourhoodSize">
            Size of the neighbourhood which makes up the neurons to be moved.
            For example, if this parameter is set to 3 then the 2 neurons before
            and the 2 after the supplied neuron index will be moved.
            </param>
            <param name="neuronIndex">
            The index in the network of the neuron whose neighbours need moving.
            </param>
            <param name="blue">
            The blue component of the target colour.
            </param>
            <param name="green">
            The green component of the target colour.
            </param>
            <param name="red">
            The red component of the target colour.
            </param>
            <remarks>This method was originally called Alterneigh.</remarks>
        </member>
        <member name="M:GifComponents.Tools.NeuQuant.MoveNeighbour(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves an individual neighbouring neuron closer to the supplied 
            target colour by a factor of alpha.
            </summary>
            <param name="neuronIndex">
            The index in the network of the neighbour to be moved.
            </param>
            <param name="alpha">
            Controls how far towards the target colour the neuron is to be moved.
            </param>
            <param name="blue">The blue component of the target colour.</param>
            <param name="green">The green component of the target colour.</param>
            <param name="red">The red component of the target colour.</param>
        </member>
        <member name="M:GifComponents.Tools.NeuQuant.UnbiasNetwork">
            <summary>
            Shift the colour values in the network to bring them back within
            the range 0 to 255.
            </summary>
        </member>
        <member name="M:GifComponents.Tools.NeuQuant.BuildIndex">
            <summary>
            Insertion sort of network and building of netindex[0..255] (to do 
            after unbias)
            Populates the _indexOfGreen array with the indices in the network
            of colours with green values closest to 0 to 255.
            TODO: would this be better as a .net collection sort?
            </summary>
        </member>
        <member name="M:GifComponents.Tools.NeuQuant.IndexOfLeastGreenNeuron(System.Int32)">
            <summary>
            Gets the index in the network of the neuron with the lowest green
            value, between the supplied index and the end of the network.
            </summary>
            <param name="startNeuronIndex">
            The index in the network to start searching at.
            </param>
            <returns>
            The index of the least green neuron.
            </returns>
        </member>
        <member name="M:GifComponents.Tools.NeuQuant.SwapNeurons(System.Int32[],System.Int32[])">
            <summary>
            Swaps the values of the two supplied neurons.
            </summary>
            <param name="neuron1">
            One of the neurons whose value should be swapped with the other
            neuron.
            </param>
            <param name="neuron2">
            The other neuron, whose value should be swapped with the first
            neuron.
            </param>
        </member>
        <member name="M:GifComponents.Tools.NeuQuant.SwapValues(System.Int32@,System.Int32@)">
            <summary>
            Swaps the values of the two supplied integers.
            </summary>
            <param name="value1">The first integer</param>
            <param name="value2">The second integer</param>
        </member>
        <member name="M:GifComponents.Tools.NeuQuant.ColourMap">
            <summary>
            Returns a colour table containing the colours of the quantized image.
            </summary>
            <returns>
            A colour table containing up to 256 colours, being the colours of
            the image after quantization.
            </returns>
        </member>
        <member name="T:GifComponents.Tools.Colour32">
            <summary>
            Struct that defines a 32 bpp colour
            </summary>
            <remarks>
            This struct is used to read data from a 32 bits per pixel image
            in memory, and is ordered in this manner as this is the way that
            the data is layed out in memory
            </remarks>
        </member>
        <member name="F:GifComponents.Tools.Colour32.Blue">
            <summary>
            Holds the blue component of the colour
            </summary>
        </member>
        <member name="F:GifComponents.Tools.Colour32.Green">
            <summary>
            Holds the green component of the colour
            </summary>
        </member>
        <member name="F:GifComponents.Tools.Colour32.Red">
            <summary>
            Holds the red component of the colour
            </summary>
        </member>
        <member name="F:GifComponents.Tools.Colour32.Alpha">
            <summary>
            Holds the alpha component of the colour
            </summary>
        </member>
        <member name="F:GifComponents.Tools.Colour32.ARGB">
            <summary>
            Permits the color32 to be treated as an int32
            </summary>
        </member>
        <member name="P:GifComponents.Tools.Colour32.Colour">
            <summary>
            Return the color for this Color32 object
            </summary>
        </member>
        <member name="T:GifComponents.Palettes.PaletteForm">
            <summary>
            A form for editing a <see cref="T:GifComponents.Palettes.Palette"/>.
            </summary>
        </member>
        <member name="F:GifComponents.Palettes.PaletteForm.components">
            <summary>
            Designer variable used to keep track of non-visual components.
            </summary>
        </member>
        <member name="M:GifComponents.Palettes.PaletteForm.Dispose(System.Boolean)">
            <summary>
            Disposes resources used by the form.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:GifComponents.Palettes.PaletteForm.InitializeComponent">
            <summary>
            This method is required for Windows Forms designer support.
            Do not change the method contents inside the source code editor. The Forms designer might
            not be able to load this method if it was changed manually.
            </summary>
        </member>
        <member name="M:GifComponents.Palettes.PaletteForm.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:GifComponents.Palettes.PaletteForm.Value">
            <summary>
            Gets and sets the Palette held by the PaletteControl in this form.
            </summary>
        </member>
        <member name="P:GifComponents.Palettes.PaletteForm.EditorService">
            <summary>
            Gets and sets the editor service which allows this control to be
            used to edit a Palette in a 
            <see cref="T:System.Windows.Forms.PropertyGrid"/>.
            </summary>
        </member>
        <member name="T:GifComponents.QuantizerType">
            <summary>
            An enumeration of colour quality quantizers available to reduce the 
            palette of an image to 256 colours.
            </summary>
        </member>
        <member name="F:GifComponents.QuantizerType.NeuQuant">
            <summary>
            Represents the NewQuant quantizer as originally included in NGif
            </summary>
        </member>
        <member name="F:GifComponents.QuantizerType.Octree">
            <summary>
            Represents the Octree quantizer from 
            http://msdn.microsoft.com/en-us/library/aa479306.aspx
            </summary>
        </member>
        <member name="F:GifComponents.QuantizerType.UseSuppliedPalette">
            <summary>
            Do not call a quantizer, instead use the user-supplied palette as
            the colour table, and find the closest colour within that palette
            for each pixel
            </summary>
        </member>
        <member name="T:GifComponents.Tools.LzwEncoder">
             <summary>
             GIFCOMPR.C       - GIF Image compression routines
            
             Lempel-Ziv compression based on 'compress'.  GIF modifications by
             David Rowley (mgardi@watdcsu.waterloo.edu)
            
              Adapted from Jef Poskanzer's Java port by way of J. M. G. Elliott.
              K Weiner 12/00
             
             GIF Image compression - modified 'compress'
            
             Based on: compress.c - File compression ala IEEE Computer, June 1984.
            
             By Authors:  Spencer W. Thomas      (decvax!harpo!utah-cs!utah-gr!thomas)
                          Jim McKie              (decvax!mcvax!jim)
                          Steve Davies           (decvax!vax135!petsd!peora!srd)
                          Ken Turkowski          (decvax!decwrl!turtlevax!ken)
                          James A. Woods         (decvax!ihnp4!ames!jaw)
                          Joe Orost              (decvax!vax135!petsd!joe)
             
             Algorithm:  use open addressing double hashing (no chaining) on the
             prefix code / next character combination.  We do a variant of Knuth's
             algorithm D (vol. 3, sec. 6.4) along with G. Knott's relatively-prime
             secondary probe.  Here, the modular division first probe is gives way
             to a faster exclusive-or manipulation.  Also do block compression with
             an adaptive reset, whereby the code table is cleared when the compression
             ratio decreases, but after the table fills.  The variable-length output
             codes are re-sized at this point, and a special CLEAR code is generated
             for the decompressor.  Late addition:  construct the table according to
             file size for noticeable speed improvement on small files.  Please direct
             questions about this implementation to ames!jaw.
             
             Inputs:
                  code:   A n_bits-bit integer.  If == -1, then EOF.  This assumes
                          that n_bits =&lt; wordsize - 1.
             Outputs:
                  Outputs code to the file.
             Assumptions:
                  Chars are 8 bits long.
             Algorithm:
                  Maintain a BITS character long buffer (so that 8 codes will
             fit in it exactly).  Use the VAX insv instruction to insert each
             code in turn.  When the buffer fills up empty it and start over.
             
             Modified by Simon Bridewell, June-August 2009:
             Downloaded from 
             http://www.thinkedge.com/blogengine/post/2008/02/20/Animated-GIF-Encoder-for-NET-Update.aspx
             http://www.thinkedge.com/BlogEngine/file.axd?file=NGif_src2.zip
             	* Corrected FxCop code analysis errors.
             	* Documentation comments converted to .net XML comments.
             	* Updated to use .net 2.0 generics - use List instead of byte[]
             TODO: maybe this belongs in TableBasedImageData?
             </summary>
        </member>
        <member name="F:GifComponents.Tools.LzwEncoder._pixels">
            <summary>
            A collection of indices within the active colour table of the 
            colours of the pixels within the image.
            </summary>
        </member>
        <member name="F:GifComponents.Tools.LzwEncoder._pixelsRemaining">
            <summary>
            Number of pixels still to process.
            </summary>
        </member>
        <member name="F:GifComponents.Tools.LzwEncoder._pixelIndex">
            <summary>
            Index of the current position within the IndexedPixels collection.
            </summary>
        </member>
        <member name="F:GifComponents.Tools.LzwEncoder._codeSize">
            <summary>
            Number of bits per encoded code.
            </summary>
        </member>
        <member name="F:GifComponents.Tools.LzwEncoder._maxCodeSize">
            <summary>
            Maximum number of bits per encoded code.
            </summary>
        </member>
        <member name="F:GifComponents.Tools.LzwEncoder._maxCode">
            <summary>
            The largest possible code given the current value of _codeSize.
            </summary>
        </member>
        <member name="F:GifComponents.Tools.LzwEncoder._maxMaxCode">
            <summary>
            The largest possible code given the largest possible value of 
            _codeSize, plus 1. We should never output this code.
            </summary>
        </member>
        <member name="F:GifComponents.Tools.LzwEncoder._nextAvailableCode">
            <summary>
            The next unused code. Initially set to the clear code plus 2.
            </summary>
        </member>
        <member name="F:GifComponents.Tools.LzwEncoder._clearCode">
            <summary>
            Clear code. This is written out by the encoder when the dictionary
            is full, and is an instruction to the decoder to empty its dictionary
            </summary>
        </member>
        <member name="F:GifComponents.Tools.LzwEncoder._endOfInformationCode">
            <summary>
            End of information code. This is set to the clear code plus 1 and
            marks the end of the encoded data.
            </summary>
        </member>
        <member name="F:GifComponents.Tools.LzwEncoder._byteCountInPacket">
            <summary>
            Number of bytes that have been added to the packet so far.
            </summary>
        </member>
        <member name="F:GifComponents.Tools.LzwEncoder._packet">
            <summary>
            An array of encoded bytes which are waiting to be written to the
            output stream. The bytes are written out once 254 of them have
            been populated.
            </summary>
        </member>
        <member name="M:GifComponents.Tools.LzwEncoder.#ctor(GifComponents.IndexedPixels)">
            <summary>
            Constructor.
            </summary>
            <param name="pixels">
            Indices in the active colour table of the colours of the pixel 
            making up the image.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The supplied pixel collection is null.
            </exception>
        </member>
        <member name="M:GifComponents.Tools.LzwEncoder.Encode(System.IO.Stream)">
            <summary>
            Encodes the data and writes it to the supplied output stream.
            </summary>
            <param name="outputStream">Output stream</param>
            <exception cref="T:System.ArgumentNullException">
            The supplied output stream is null.
            </exception>
        </member>
        <member name="M:GifComponents.Tools.LzwEncoder.Add(System.Byte,System.IO.Stream)">
            <summary>
            Add a character to the end of the current packet, and if the packet
            is 254 characters long, flush the packet to disk.
            </summary>
            <param name="c">The character to add</param>
            <param name="outputStream">Output stream</param>
        </member>
        <member name="M:GifComponents.Tools.LzwEncoder.ClearTable(System.IO.Stream)">
            <summary>
            Clears out the hash table.
            </summary>
            <param name="outs">Output stream</param>
        </member>
        <member name="M:GifComponents.Tools.LzwEncoder.ResetCodeTable(System.Int32)">
            <summary>
            Resets the code table
            </summary>
            <param name="hsize"></param>
        </member>
        <member name="M:GifComponents.Tools.LzwEncoder.Compress(System.Int32,System.IO.Stream)">
            <summary>
            Compress method
            </summary>
            <param name="init_bits"></param>
            <param name="outs"></param>
        </member>
        <member name="M:GifComponents.Tools.LzwEncoder.Flush(System.IO.Stream)">
            <summary>
            Flush the packet to disk, and reset the accumulator
            </summary>
            <param name="outs"></param>
        </member>
        <member name="M:GifComponents.Tools.LzwEncoder.MaxCode(System.Int32)">
            <summary>
            Calculates and returns the maximum possible code given the supplied
            code size.
            This is calculated as 2 to the power of the code size, minus one.
            </summary>
            <param name="codeSize">
            Code size in bits.
            </param>
            <returns></returns>
        </member>
        <member name="M:GifComponents.Tools.LzwEncoder.NextPixel">
            <summary>
            Gets the next pixel from the supplied IndexedPixels collection,
            increments the index of the current position within the collection,
            and decrements the number of pixels remaining.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GifComponents.Tools.LzwEncoder.Output(System.Int32,System.IO.Stream)">
            <summary>
            Adds an encoded LZW code to a buffer ready to be written to the
            output stream. Any full bytes contained in the buffer are then
            written to the output stream and removed from the buffer.
            </summary>
            <param name="code"></param>
            <param name="outputStream">
            The output stream to write to.
            </param>
        </member>
        <member name="T:GifComponents.Components.GifHeader">
            <summary>
            The header section of a Graphics Interchange Format stream.
            See http://www.w3.org/Graphics/GIF/spec-gif89a.txt section 17.
            </summary>
            <remarks>
            The Header identifies the GIF Data Stream in context. The Signature 
            field marks the beginning of the Data Stream, and the Version field 
            identifies the set of capabilities required of a decoder to fully 
            process the Data Stream.
            This block is REQUIRED; exactly one Header must be present per Data 
            Stream.
            </remarks>
        </member>
        <member name="M:GifComponents.Components.GifHeader.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="signature">
            The GIF signature which identifies a GIF stream.
            Should contain the fixed value "GIF".
            </param>
            <param name="gifVersion">
            The version of the GIF standard used by this stream.
            </param>
        </member>
        <member name="M:GifComponents.Components.GifHeader.#ctor(System.IO.Stream)">
            <summary>
            Constructor.
            </summary>
            <param name="inputStream">
            A <see cref="T:System.IO.Stream"/> containing the data to create the
            GifHeader.
            </param>
        </member>
        <member name="M:GifComponents.Components.GifHeader.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="inputStream">
            A <see cref="T:System.IO.Stream"/> containing the data to create the
            GifHeader.
            </param>
            <param name="xmlDebugging">
            A boolean value indicating whether or not an XML document should be 
            created showing how the GIF stream was decoded.
            </param>
        </member>
        <member name="M:GifComponents.Components.GifHeader.WriteToStream(System.IO.Stream)">
            <summary>
            Writes this component to the supplied output stream.
            </summary>
            <param name="outputStream">
            The output stream to write to.
            </param>
        </member>
        <member name="P:GifComponents.Components.GifHeader.Signature">
            <summary>
            Gets the signature which introduces the GIF stream.
            This should contain the fixed value "GIF".
            </summary>
        </member>
        <member name="P:GifComponents.Components.GifHeader.Version">
            <summary>
            Gets the version of the Graphics Interchange Format used by the GIF 
            stream which contains this header.
            </summary>
        </member>
        <member name="T:GifComponents.IndexedPixels">
            <summary>
            Represents an image in terms of the indices into its associated
            <see cref="T:GifComponents.Components.ColourTable"/> which relate to the 
            colours of the individual pixels in the image.
            </summary>
        </member>
        <member name="F:GifComponents.IndexedPixels._isFixedSize">
            <summary>
            Indicates whether the collection was instantiated with a fixed
            size.
            </summary>
        </member>
        <member name="M:GifComponents.IndexedPixels.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:GifComponents.IndexedPixels.#ctor(System.Int32)">
            <summary>
            Constructor.
            Initialises the pixel collection to the specified size.
            </summary>
            <param name="capacity">
            The fixed capacity to which the collection should be initialsed.
            </param>
        </member>
        <member name="M:GifComponents.IndexedPixels.Add(System.Byte)">
            <summary>
            Adds a pixel index to the collection of pixel indices.
            </summary>
            <param name="pixelIndex">
            The index within a colour table of the colour of the pixel to add
            to the collection.
            </param>
            <remarks>
            This method is provided because the Add method of 
            <see cref="T:System.Collections.ObjectModel.Collection`1"/>
            throws a misleading exception when the collection has been 
            instantiated with a fixed size, implying that the collection is
            read-only rather than that items cannot be added to it.
            </remarks>
            <exception cref="T:System.NotSupportedException">
            The collection was instantiated with a fixed size, therefore no new
            items can be added to it.
            </exception>
        </member>
        <member name="P:GifComponents.IndexedPixels.Item(System.Int32)">
            <summary>
            Gets or sets the byte at the specified index in the collection.
            </summary>
            <remarks>
            Note the use of base.Items[index] rather than base[index].
            This is becase base[index] is read-only when the instance has been
            instantiated with a default size, whereas the protected Items
            property is not read-only.
            </remarks>
        </member>
        <member name="T:GifComponents.Components.GraphicControlExtension">
            <summary>
            The Graphic Control Extension contains parameters used when processing 
            a graphic rendering block. The scope of this extension is the first 
            graphic rendering block to follow. The extension contains only one 
            data sub-block.
            This block is OPTIONAL; at most one Graphic Control Extension may 
            precede a graphic rendering block. This is the only limit to the number 
            of Graphic Control Extensions that may be contained in a Data Stream.
            </summary>
        </member>
        <member name="F:GifComponents.Components.GraphicControlExtension.ExpectedBlockSize">
            <summary>
            The expected block size for a Graphic Control Extension
            </summary>
        </member>
        <member name="M:GifComponents.Components.GraphicControlExtension.#ctor(System.Int32,GifComponents.DisposalMethod,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="blockSize">
            Sets the <see cref="P:GifComponents.Components.GraphicControlExtension.BlockSize"/>.
            </param>
            <param name="disposalMethod">
            Sets the <see cref="P:GifComponents.Components.GraphicControlExtension.DisposalMethod"/>.
            </param>
            <param name="expectsUserInput">
            Sets the <see cref="P:GifComponents.Components.GraphicControlExtension.ExpectsUserInput"/> flag.
            </param>
            <param name="hasTransparentColour">
            Sets the <see cref="P:GifComponents.Components.GraphicControlExtension.HasTransparentColour"/> flag.
            </param>
            <param name="delayTime">
            Sets the <see cref="P:GifComponents.Components.GraphicControlExtension.DelayTime"/>.
            </param>
            <param name="transparentColourIndex">
            Sets the <see cref="P:GifComponents.Components.GraphicControlExtension.TransparentColourIndex"/>.
            </param>
        </member>
        <member name="M:GifComponents.Components.GraphicControlExtension.#ctor(System.IO.Stream)">
            <summary>
            Constructor.
            </summary>
            <param name="inputStream">
            The input stream to read.
            </param>
        </member>
        <member name="M:GifComponents.Components.GraphicControlExtension.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="inputStream">
            The input stream to read.
            </param>
            <param name="xmlDebugging">Whether or not to create debug XML</param>
        </member>
        <member name="M:GifComponents.Components.GraphicControlExtension.WriteToStream(System.IO.Stream)">
            <summary>
            Writes this component to the supplied output stream.
            </summary>
            <param name="outputStream">
            The output stream to write to.
            </param>
        </member>
        <member name="P:GifComponents.Components.GraphicControlExtension.BlockSize">
            <summary>
            Number of bytes in the block, after the Block Size field and up to 
            but not including the Block Terminator.
            This field contains the fixed value 4.
            </summary>
        </member>
        <member name="P:GifComponents.Components.GraphicControlExtension.DisposalMethod">
            <summary>
            Indicates the way in which the graphic is to be treated after being 
            displayed.
            </summary>
        </member>
        <member name="P:GifComponents.Components.GraphicControlExtension.ExpectsUserInput">
            <summary>
            Indicates whether or not user input is expected before continuing. 
            If the flag is set, processing will continue when user input is 
            entered. 
            The nature of the User input is determined by the application 
            (Carriage Return, Mouse Button Click, etc.).
            
            Values :    0 -   User input is not expected.
                        1 -   User input is expected.
            
            When a Delay Time is used and the User Input Flag is set, 
            processing will continue when user input is received or when the
            delay time expires, whichever occurs first.
            </summary>
        </member>
        <member name="P:GifComponents.Components.GraphicControlExtension.HasTransparentColour">
            <summary>
            Indicates whether a transparency index is given in the Transparent 
            Index field.
            </summary>
        </member>
        <member name="P:GifComponents.Components.GraphicControlExtension.DelayTime">
            <summary>
            If not 0, this field specifies the number of hundredths (1/100) 
            of a second to wait before continuing with the processing of the 
            Data Stream. 
            The clock starts ticking immediately after the graphic is rendered. 
            This field may be used in conjunction with the User Input Flag field.
            </summary>
        </member>
        <member name="P:GifComponents.Components.GraphicControlExtension.TransparentColourIndex">
            <summary>
            The Transparency Index is such that when encountered, the 
            corresponding pixel of the display device is not modified and 
            processing goes on to the next pixel. 
            The index is present if and only if the Transparency Flag is set 
            to 1.
            </summary>
        </member>
        <member name="T:GifComponents.Tools.Utils">
            <summary>
            Utility class containing various static methods.
            TODO: remove Utils from the project.
            </summary>
        </member>
        <member name="M:GifComponents.Tools.Utils.Handle(System.Exception)">
            <summary>
            Exception handler.
            Writes details of the exception to the console and to the debug 
            stream.
            </summary>
            <param name="ex"></param>
        </member>
        <member name="T:GifComponents.Palettes.PaletteEditor">
            <summary>
            Allows a PaletteControl to be used to edit <see cref="T:GifComponents.Palettes.Palette"/> 
            properties in a
            <see cref="T:System.Windows.Forms.PropertyGrid"/>.
            </summary>
        </member>
        <member name="M:GifComponents.Palettes.PaletteEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets a <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"/>
            indicating that the Palette should be edited using a modal form.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:GifComponents.Palettes.PaletteEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Tells Windows Forms how to edit an instance of a Palette.
            </summary>
            <param name="context">Contextual information</param>
            <param name="provider">Retrieves a service provider</param>
            <param name="value">The initial value of the Palette</param>
            <returns>
            The new value of the Palette after it has been edited by the user.
            </returns>
        </member>
        <member name="M:GifComponents.Palettes.PaletteEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets a boolean value indicating whether a Palette can be represented
            by a small bitmap.
            </summary>
            <param name="context">Contextual information.</param>
            <returns>True.</returns>
        </member>
        <member name="M:GifComponents.Palettes.PaletteEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
            <summary>
            Paints a small icon representing the current value of a Palette onto
            a PropertyGrid.
            </summary>
            <param name="e">
            Event arguments.
            </param>
        </member>
        <member name="M:GifComponents.Palettes.PaletteEditor.GetEmptyPaletteBitmap">
            <summary>
            Gets a bitmap representing a palette with no colours.
            </summary>
            <returns>
            A bitmap representing a palette with no colours.
            </returns>
        </member>
        <member name="F:GifComponents.Palettes.PaletteEditor._disposed">
            <summary>
            Indicates whether or not the Dispose( bool ) method has already been 
            called.
            </summary>
        </member>
        <member name="M:GifComponents.Palettes.PaletteEditor.Finalize">
            <summary>
            Finalzer.
            </summary>
        </member>
        <member name="M:GifComponents.Palettes.PaletteEditor.Dispose">
            <summary>
            Disposes resources used by this class.
            </summary>
        </member>
        <member name="M:GifComponents.Palettes.PaletteEditor.Dispose(System.Boolean)">
            <summary>
            Disposes resources used by this class.
            </summary>
            <param name="disposing">
            Indicates whether this method is being called by the class's Dispose
            method (true) or by the garbage collector (false).
            </param>
        </member>
        <member name="T:GifComponents.GifFrame">
            <summary>
            A single image frame from a GIF file.
            </summary>
        </member>
        <member name="T:GifComponents.Components.GifFrame">
             <summary>
             A single image frame from a GIF file.
             Originally a nested class within the GifDecoder class by Kevin Weiner.
             Downloaded from 
             http://www.thinkedge.com/BlogEngine/file.axd?file=NGif_src2.zip
            
             Amended by Simon Bridewell June 2009-February 2010:
             1. Made member variables private.
             2. Added various properties to expose all the elements of the GifFrame.
             3. Added constructors for use in both encoding and decoding.
             4. Derive from GifComponent.
             5. Added constructor( Stream... )
             6. Removed code to swap out transparent colour and replace with black
                (bug 2940635).
             7. Corrected decoding of frames with transparent pixels (bug 2940669)
             </summary>
        </member>
        <member name="M:GifComponents.Components.GifFrame.#ctor(System.Drawing.Image)">
            <summary>
            Constructor.
            </summary>
            <param name="theImage">
            The image held in this frame of the GIF file
            </param>
        </member>
        <member name="M:GifComponents.Components.GifFrame.#ctor(System.IO.Stream,GifComponents.Components.LogicalScreenDescriptor,GifComponents.Components.ColourTable,GifComponents.Components.GraphicControlExtension,GifComponents.Components.GifFrame,GifComponents.Components.GifFrame)">
            <summary>
            Creates and returns a GifFrame by reading its data from the supplied
            input stream.
            </summary>
            <param name="inputStream">
            A stream containing the data which makes the GifStream, starting 
            with the image descriptor for this frame.
            </param>
            <param name="lsd">
            The logical screen descriptor for the GIF stream.
            </param>
            <param name="gct">
            The global colour table for the GIF stream.
            </param>
            <param name="gce">
            The graphic control extension, if any, which precedes this image in
            the input stream.
            </param>
            <param name="previousFrame">
            The frame which precedes this one in the GIF stream, if present.
            </param>
            <param name="previousFrameBut1">
            The frame which precedes the frame before this one in the GIF stream,
            if present.
            </param>
        </member>
        <member name="M:GifComponents.Components.GifFrame.#ctor(System.IO.Stream,GifComponents.Components.LogicalScreenDescriptor,GifComponents.Components.ColourTable,GifComponents.Components.GraphicControlExtension,GifComponents.Components.GifFrame,GifComponents.Components.GifFrame,System.Boolean)">
            <summary>
            Creates and returns a GifFrame by reading its data from the supplied
            input stream.
            </summary>
            <param name="inputStream">
            A stream containing the data which makes the GifStream, starting 
            with the image descriptor for this frame.
            </param>
            <param name="lsd">
            The logical screen descriptor for the GIF stream.
            </param>
            <param name="gct">
            The global colour table for the GIF stream.
            </param>
            <param name="gce">
            The graphic control extension, if any, which precedes this image in
            the input stream.
            </param>
            <param name="previousFrame">
            The frame which precedes this one in the GIF stream, if present.
            </param>
            <param name="previousFrameBut1">
            The frame which precedes the frame before this one in the GIF stream,
            if present.
            </param>
            <param name="xmlDebugging">Whether or not to create debug XML</param>
        </member>
        <member name="M:GifComponents.Components.GifFrame.WriteToStream(System.IO.Stream)">
            <summary>
            Writes this component to the supplied output stream.
            </summary>
            <param name="outputStream">
            The output stream to write to.
            </param>
        </member>
        <member name="M:GifComponents.Components.GifFrame.CreateBitmap(GifComponents.Components.TableBasedImageData,GifComponents.Components.LogicalScreenDescriptor,GifComponents.Components.ImageDescriptor,GifComponents.Components.ColourTable,GifComponents.Components.GraphicControlExtension,GifComponents.Components.GifFrame,GifComponents.Components.GifFrame,GifComponents.GifComponentStatus@)">
            <summary>
            Sets the pixels of the decoded image.
            </summary>
            <param name="imageData">
            Table based image data containing the indices within the active
            colour table of the colours of the pixels in this frame.
            </param>
            <param name="lsd">
            The logical screen descriptor for the GIF stream.
            </param>
            <param name="id">
            The image descriptor for this frame.
            </param>
            <param name="activeColourTable">
            The colour table to use with this frame - either the global colour
            table or a local colour table.
            </param>
            <param name="gce">
            The graphic control extension, if any, which precedes this image in
            the input stream.
            </param>
            <param name="previousFrame">
            The frame which precedes this one in the GIF stream, if present.
            </param>
            <param name="previousFrameBut1">
            The frame which precedes the frame before this one in the GIF stream,
            if present.
            </param>
            <param name="status">
            GifComponentStatus containing any errors which occurred during the
            creation of the bitmap.
            </param>
        </member>
        <member name="M:GifComponents.Components.GifFrame.GetBaseImage(GifComponents.Components.GifFrame,GifComponents.Components.GifFrame,GifComponents.Components.LogicalScreenDescriptor,GifComponents.Components.GraphicControlExtension,GifComponents.Components.ColourTable)">
            <summary>
            Gets the base image for this frame. This will be overpainted with
            the pixels for this frame, where they are not transparent.
            </summary>
            <param name="previousFrame">
            The frame which preceded this frame in the GIF stream.
            Null if this is the first frame in the stream.
            </param>
            <param name="previousFrameBut1">
            The frame which preceded the previous frame in the GIF stream.
            Null if this is the first or seond frame in the stream.
            </param>
            <param name="lsd">
            The logical screen descriptor for this GIF stream.
            </param>
            <param name="gce">
            The graphic control extension for this frame.
            </param>
            <param name="act">
            The active colour table for this frame.
            </param>
            <returns></returns>
        </member>
        <member name="M:GifComponents.Components.GifFrame.CreateBitmap(System.Drawing.Bitmap,System.Drawing.Color[])">
            <summary>
            Creates and returns a Bitmap of the supplied size composed of pixels
            of the supplied colours, working left to right and then top to 
            bottom.
            </summary>
            <param name="baseImage">
            The image to start with; this is overpainted with the supplied 
            pixels where they are not transparent.
            </param>
            <param name="pixels">
            An array of the colours of the pixels for the bitmap to be created.
            </param>
        </member>
        <member name="P:GifComponents.Components.GifFrame.Delay">
            <summary>
            Gets and sets the delay in hundredths of a second before showing 
            the next frame.
            </summary>
        </member>
        <member name="P:GifComponents.Components.GifFrame.BackgroundColour">
            <summary>
            Gets and sets the background colour of the current frame
            </summary>
        </member>
        <member name="P:GifComponents.Components.GifFrame.ExpectsUserInput">
            <summary>
            Gets a flag indicating whether the device displaying the animation
            should wait for user input (e.g. a mouse click or key press) before
            displaying the next frame.
            </summary>
            <remarks>
            This is actually a property of the graphic control extension.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            An attempt was made to set this property for a GifFrame which was
            created by a GifDecoder.
            </exception>
        </member>
        <member name="P:GifComponents.Components.GifFrame.Position">
            <summary>
            Gets and sets the position of this frame's image within the logical
            screen.
            </summary>
            <remarks>
            This is actually a property of the image descriptor.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            An attempt was made to set this property for a GifFrame which was
            created by a GifDecoder.
            </exception>
        </member>
        <member name="P:GifComponents.Components.GifFrame.Palette">
            <summary>
            Gets and sets a <see cref="P:GifComponents.Components.GifFrame.Palette"/> to be used as the frame's
            local colour table.
            </summary>
        </member>
        <member name="P:GifComponents.Components.GifFrame.TheImage">
            <summary>
            Gets the image held in this frame.
            </summary>
        </member>
        <member name="P:GifComponents.Components.GifFrame.LocalColourTable">
            <summary>
            Gets the local colour table for this frame.
            </summary>
        </member>
        <member name="P:GifComponents.Components.GifFrame.GraphicControlExtension">
            <summary>
            Gets the graphic control extension which precedes this image.
            </summary>
        </member>
        <member name="P:GifComponents.Components.GifFrame.ImageDescriptor">
            <summary>
            Gets the image descriptor for this frame.
            </summary>
        </member>
        <member name="P:GifComponents.Components.GifFrame.IndexedPixels">
            <summary>
            Gets the table-based image data containing the indices within the
            active colour table of the colours of each of the pixels in the
            frame.
            </summary>
        </member>
        <member name="M:GifComponents.GifFrame.#ctor(System.Drawing.Image)">
            <summary>
            Constructor.
            </summary>
            <param name="theImage">
            The image held in this frame of the GIF file
            </param>
        </member>
        <member name="M:GifComponents.GifFrame.#ctor(System.IO.Stream,GifComponents.Components.LogicalScreenDescriptor,GifComponents.Components.ColourTable,GifComponents.Components.GraphicControlExtension,GifComponents.GifFrame,GifComponents.GifFrame)">
            <summary>
            Creates and returns a GifFrame by reading its data from the supplied
            input stream.
            </summary>
            <param name="inputStream">
            A stream containing the data which makes the GifStream, starting 
            with the image descriptor for this frame.
            </param>
            <param name="lsd">
            The logical screen descriptor for the GIF stream.
            </param>
            <param name="gct">
            The global colour table for the GIF stream.
            </param>
            <param name="gce">
            The graphic control extension, if any, which precedes this image in
            the input stream.
            </param>
            <param name="previousFrame">
            The frame which precedes this one in the GIF stream, if present.
            </param>
            <param name="previousFrameBut1">
            The frame which precedes the frame before this one in the GIF stream,
            if present.
            </param>
        </member>
        <member name="M:GifComponents.GifFrame.#ctor(System.IO.Stream,GifComponents.Components.LogicalScreenDescriptor,GifComponents.Components.ColourTable,GifComponents.Components.GraphicControlExtension,GifComponents.GifFrame,GifComponents.GifFrame,System.Boolean)">
            <summary>
            Creates and returns a GifFrame by reading its data from the supplied
            input stream.
            </summary>
            <param name="inputStream">
            A stream containing the data which makes the GifStream, starting 
            with the image descriptor for this frame.
            </param>
            <param name="lsd">
            The logical screen descriptor for the GIF stream.
            </param>
            <param name="gct">
            The global colour table for the GIF stream.
            </param>
            <param name="gce">
            The graphic control extension, if any, which precedes this image in
            the input stream.
            </param>
            <param name="previousFrame">
            The frame which precedes this one in the GIF stream, if present.
            </param>
            <param name="previousFrameBut1">
            The frame which precedes the frame before this one in the GIF stream,
            if present.
            </param>
            <param name="xmlDebugging">Whether or not to create debug XML</param>
        </member>
        <member name="T:GifComponents.Components.ImageDescriptor">
            <summary>
            Describes a single image within a Graphics Interchange Format data 
            stream.
            See http://www.w3.org/Graphics/GIF/spec-gif89a.txt section 20.
            </summary>
            <remarks>
            Each image in the Data Stream is composed of an Image Descriptor, an 
            optional Local Color Table, and the image data.  Each image must fit 
            within the boundaries of the Logical Screen, as defined in the 
            Logical Screen Descriptor.
            
            The Image Descriptor contains the parameters necessary to process a 
            table based image. The coordinates given in this block refer to 
            coordinates within the Logical Screen, and are given in pixels. This 
            block is a Graphic-Rendering Block, optionally preceded by one or more 
            Control blocks such as the Graphic Control Extension, and may be 
            optionally followed by a Local Color Table; the Image Descriptor is 
            always followed by the image data.
            
            This block is REQUIRED for an image.  Exactly one Image Descriptor must
            be present per image in the Data Stream.  An unlimited number of images
            may be present per Data Stream.
            
            The scope of this block is the Table-based Image Data Block that 
            follows it. This block may be modified by the Graphic Control Extension.
            </remarks>
        </member>
        <member name="M:GifComponents.Components.ImageDescriptor.#ctor(System.Drawing.Point,System.Drawing.Size,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="position">
            Sets the <see cref="P:GifComponents.Components.ImageDescriptor.Position"/>.
            </param>
            <param name="size">
            Sets the <see cref="P:GifComponents.Components.ImageDescriptor.Size"/>.
            </param>
            <param name="hasLocalColourTable">
            Sets the <see cref="P:GifComponents.Components.ImageDescriptor.HasLocalColourTable"/> flag.
            </param>
            <param name="isInterlaced">
            Sets the <see cref="P:GifComponents.Components.ImageDescriptor.IsInterlaced"/> flag.
            </param>
            <param name="isSorted">
            Sets the <see cref="P:GifComponents.Components.ImageDescriptor.IsSorted"/> flag.
            </param>
            <param name="localColourTableSizeBits">
            Sets the <see cref="P:GifComponents.Components.ImageDescriptor.LocalColourTableSizeBits"/>.
            </param>
        </member>
        <member name="M:GifComponents.Components.ImageDescriptor.#ctor(System.IO.Stream)">
            <summary>
            Reads and returns an image descriptor from the supplied stream.
            </summary>
            <param name="inputStream">
            The input stream to read.
            </param>
        </member>
        <member name="M:GifComponents.Components.ImageDescriptor.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Reads and returns an image descriptor from the supplied stream.
            </summary>
            <param name="inputStream">
            The input stream to read.
            </param>
            <param name="xmlDebugging">Whether or not to create debug XML</param>
        </member>
        <member name="M:GifComponents.Components.ImageDescriptor.WriteToStream(System.IO.Stream)">
            <summary>
            Writes this component to the supplied output stream.
            </summary>
            <param name="outputStream">
            The output stream to write to.
            </param>
        </member>
        <member name="P:GifComponents.Components.ImageDescriptor.Position">
            <summary>
            Gets the position, in pixels, of the top-left corner of the image,
            with respect to the top-left corner of the logical screen.
            Top-left corner of the logical screen is 0,0.
            </summary>
        </member>
        <member name="P:GifComponents.Components.ImageDescriptor.Size">
            <summary>
            Gets the size of the image in pixels.
            </summary>
        </member>
        <member name="P:GifComponents.Components.ImageDescriptor.HasLocalColourTable">
            <summary>
            Gets a boolean value indicating the presence of a Local Color Table 
            immediately following this Image Descriptor.
            </summary>
        </member>
        <member name="P:GifComponents.Components.ImageDescriptor.IsInterlaced">
            <summary>
            Gets a boolean value indicating whether the image is interlaced. An 
            image is interlaced in a four-pass interlace pattern; see Appendix E 
            for details.
            </summary>
        </member>
        <member name="P:GifComponents.Components.ImageDescriptor.IsSorted">
            <summary>
            Gets a boolean value indicating whether the Local Color Table is
            sorted.  If the flag is set, the Local Color Table is sorted, in
            order of decreasing importance. Typically, the order would be
            decreasing frequency, with most frequent color first. This assists
            a decoder, with fewer available colors, in choosing the best subset
            of colors; the decoder may use an initial segment of the table to
            render the graphic.
            </summary>
        </member>
        <member name="P:GifComponents.Components.ImageDescriptor.LocalColourTableSizeBits">
            <summary>
            If the Local Color Table Flag is set to 1, the value in this field 
            is used to calculate the number of bytes contained in the Local 
            Color Table. To determine that actual size of the color table, 
            raise 2 to the value of the field + 1. 
            This value should be 0 if there is no Local Color Table specified.
            </summary>
        </member>
        <member name="P:GifComponents.Components.ImageDescriptor.LocalColourTableSize">
            <summary>
            Gets the actual size of the local colour table.
            </summary>
        </member>
        <member name="T:GifComponents.Palettes.Palette">
            <summary>
            A palette of up to 256 colours.
            This class exposes methods to load and save the palette in Adobe Colour
            Table (.act) format, i.e. a series of red, green and blue intensity
            bytes.
            </summary>
        </member>
        <member name="F:GifComponents.Palettes.Palette._maxColours">
            <summary>
            The maximum number of colours which can be held in a Palette.
            </summary>
        </member>
        <member name="F:GifComponents.Palettes.Palette._expectedBytes">
            <summary>
            The number of bytes we expect in an Adobe Colour Tablefile.
            </summary>
        </member>
        <member name="M:GifComponents.Palettes.Palette.Validate">
            <summary>
            Throws an exception if the current Palette is not in a suitable
            state for encoding a GIF.
            </summary>
        </member>
        <member name="M:GifComponents.Palettes.Palette.FromFile(System.String)">
            <summary>
            Returns a Palette object read from the specified Adobe Colour Table
            file.
            </summary>
            <param name="fileName">
            Path to the Adobe Colour Table file
            </param>
            <returns>
            A Palette object as read from the specified file.
            </returns>
        </member>
        <member name="M:GifComponents.Palettes.Palette.FromStream(System.IO.Stream)">
            <summary>
            Returns a Palette object read from the supplied stream.
            </summary>
            <param name="inputStream">
            The stream containing the Palette's data.
            </param>
            <returns>
            A Palette object as read from the supplied stream.
            </returns>
        </member>
        <member name="M:GifComponents.Palettes.Palette.WriteToFile(System.String)">
            <summary>
            Writes the current instance to an Adobe Colour Table file.
            </summary>
            <param name="fileName">
            The name of the file to write.
            </param>
        </member>
        <member name="M:GifComponents.Palettes.Palette.WriteToStream(System.IO.Stream)">
            <summary>
            Writes the current instance to the supplied stream in Adobe Colour 
            Table format.
            </summary>
            <param name="outputStream">
            The stream to write to.
            </param>
        </member>
        <member name="M:GifComponents.Palettes.Palette.Add(System.Drawing.Color)">
            <summary>
            Adds the supplied colour to the palette.
            </summary>
            <param name="colourToAdd">
            The colour to add to the palette.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The palette already contains the maximum number of colours allowed.
            </exception>
        </member>
        <member name="M:GifComponents.Palettes.Palette.ToString">
            <summary>
            Gets a string representation of the current Palette.
            </summary>
            <returns>
            A string indicating the number of colours in the palette.
            </returns>
        </member>
        <member name="M:GifComponents.Palettes.Palette.ToBitmap">
            <summary>
            Gets a <see cref="T:System.Drawing.Bitmap"/> representing the current
            palette.
            </summary>
            <returns>
            A 16x16 bitmap made up of blocks of colour including all the colours
            in the palette.
            </returns>
        </member>
        <member name="M:GifComponents.Palettes.Palette.GetBrushSize(System.Int32)">
            <summary>
            Works out the best brush size for filling a 16x16 bitmap with blocks
            of colour to show all the colours in the palette.
            </summary>
            <param name="numberOfColours">
            The number of colours in the palette.
            </param>
            <returns>
            A <see cref="T:System.Drawing.Size"/> representing the size of blocks
            needed to best fill a 16x16 bitmap with the supplied number of
            colours.
            </returns>
        </member>
        <member name="T:GifComponents.Components.DataBlock">
            <summary>
            A data sub-block to form part of a Graphics Interchange Format data
            stream.
            See http://www.w3.org/Graphics/GIF/spec-gif89a.txt section 15.
            </summary>
            <remarks>
            Data Sub-blocks are units containing data. They do not have a label, 
            these blocks are processed in the context of control blocks, wherever 
            data blocks are specified in the format. The first byte of the Data 
            sub-block indicates the number of data bytes to follow. A data sub-block 
            may contain from 0 to 255 data bytes. The size of the block does not 
            account for the size byte itself, therefore, the empty sub-block is one 
            whose size field contains 0x00.
            </remarks>
        </member>
        <member name="M:GifComponents.Components.DataBlock.#ctor(System.Int32,System.Byte[])">
            <summary>
            Constructor.
            </summary>
            <param name="blockSize">
            The number of bytes in the data block.
            </param>
            <param name="data">
            The bytes which make up the data in the data block.
            </param>
        </member>
        <member name="M:GifComponents.Components.DataBlock.#ctor(System.IO.Stream)">
            <summary>
            Reads the next variable length data block from the input stream.
            </summary>
            <param name="inputStream">
            The input stream to read.
            </param>
        </member>
        <member name="M:GifComponents.Components.DataBlock.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Reads the next variable length data block from the input stream.
            </summary>
            <param name="inputStream">
            The input stream to read.
            </param>
            <param name="xmlDebugging">Whether or not to create debug XML</param>
        </member>
        <member name="M:GifComponents.Components.DataBlock.WriteToStream(System.IO.Stream)">
            <summary>
            Writes this component to the supplied output stream.
            </summary>
            <param name="outputStream">
            The output stream to write to.
            </param>
        </member>
        <member name="P:GifComponents.Components.DataBlock.DeclaredBlockSize">
            <summary>
            Gets the block size held in the first byte of this data block.
            This should be the same as the actual length of the data block but
            may not be if the data block was instantiated from a corrupt stream
            - check the ErrorStatus property.
            </summary>
        </member>
        <member name="P:GifComponents.Components.DataBlock.ActualBlockSize">
            <summary>
            Gets the actual length of the data block.
            </summary>
        </member>
        <member name="P:GifComponents.Components.DataBlock.Data">
            <summary>
            Gets the byte array containing the data in this data sub-block.
            This does not include the first byte which holds the block size.
            </summary>
        </member>
        <member name="P:GifComponents.Components.DataBlock.Item(System.Int32)">
            <summary>
            Gets a specific byte within the data block
            </summary>
        </member>
        <member name="T:GifComponents.PackedFields">
            <summary>
            Represents a byte of data in a GIF data stream which contains a number
            of data items.
            </summary>
        </member>
        <member name="M:GifComponents.PackedFields.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:GifComponents.PackedFields.#ctor(System.Int32)">
            <summary>
            Constructor.
            Sets the bits in the packed fields to the corresponding bits from
            the supplied byte.
            </summary>
            <param name="data">
            A single byte of data, consisting of fields which may be of one or
            more bits.
            </param>
        </member>
        <member name="M:GifComponents.PackedFields.SetBit(System.Int32,System.Boolean)">
            <summary>
            Sets the specified bit within the packed fields to the supplied 
            value.
            </summary>
            <param name="index">
            The zero-based index within the packed fields of the bit to set.
            </param>
            <param name="valueToSet">
            The value to set the bit to.
            </param>
        </member>
        <member name="M:GifComponents.PackedFields.SetBits(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the specified bits within the packed fields to the supplied 
            value.
            </summary>
            <param name="startIndex">
            The zero-based index within the packed fields of the first bit to 
            set.
            </param>
            <param name="length">
            The number of bits to set.
            </param>
            <param name="valueToSet">
            The value to set the bits to.
            </param>
        </member>
        <member name="M:GifComponents.PackedFields.GetBit(System.Int32)">
            <summary>
            Gets the value of the specified bit within the byte.
            </summary>
            <param name="index">
            The zero-based index of the bit to get.
            </param>
            <returns>
            The value of the specified bit within the byte.
            </returns>
        </member>
        <member name="M:GifComponents.PackedFields.GetBits(System.Int32,System.Int32)">
            <summary>
            Gets the value of the specified bits within the byte.
            </summary>
            <param name="startIndex">
            The zero-based index of the first bit to get.
            </param>
            <param name="length">
            The number of bits to get.
            </param>
            <returns>
            The value of the specified bits within the byte.
            </returns>
        </member>
        <member name="P:GifComponents.PackedFields.Byte">
            <summary>
            Gets the byte which represents the data items held in the packed 
            fields.
            </summary>
        </member>
        <member name="T:GifComponents.Tools.Quantizer">
            <summary>
            Base class for a colour quantizer.
            </summary>
        </member>
        <member name="M:GifComponents.Tools.Quantizer.#ctor(System.Boolean)">
            <summary>
            Construct the quantizer
            </summary>
            <param name="singlePass">
            If true, the quantization only needs to loop through the source 
            pixels once
            </param>
            <remarks>
            If you construct this class with a true value for singlePass, then 
            the code will, when quantizing your image, only call the 
            'QuantizeImage' function. 
            If two passes are required, the code will call 
            'InitialQuantizeImage' and then 'QuantizeImage'.
            </remarks>
        </member>
        <member name="M:GifComponents.Tools.Quantizer.Quantize(System.Drawing.Image)">
            <summary>
            Quantize an image and return the resulting output bitmap
            </summary>
            <param name="source">The image to quantize</param>
            <returns>A quantized version of the image</returns>
        </member>
        <member name="M:GifComponents.Tools.Quantizer.FirstPass(System.Drawing.Imaging.BitmapData,System.Int32,System.Int32)">
            <summary>
            Execute the first pass through the pixels in the image
            </summary>
            <param name="sourceData">The source data</param>
            <param name="width">The width in pixels of the image</param>
            <param name="height">The height in pixels of the image</param>
        </member>
        <member name="M:GifComponents.Tools.Quantizer.SecondPass(System.Drawing.Imaging.BitmapData,System.Drawing.Bitmap,System.Int32,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Execute a second pass through the bitmap
            </summary>
            <param name="sourceData">The source bitmap, locked into memory</param>
            <param name="output">The output bitmap</param>
            <param name="width">The width in pixels of the image</param>
            <param name="height">The height in pixels of the image</param>
            <param name="bounds">The bounding rectangle</param>
        </member>
        <member name="M:GifComponents.Tools.Quantizer.InitialQuantizePixel(GifComponents.Tools.Colour32*)">
            <summary>
            Override this to process the pixel in the first pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <remarks>
            This function need only be overridden if your quantize algorithm 
            needs two passes, such as an Octree quantizer.
            </remarks>
        </member>
        <member name="M:GifComponents.Tools.Quantizer.QuantizePixel(GifComponents.Tools.Colour32*)">
            <summary>
            Override this to process the pixel in the second pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <returns>The quantized value</returns>
        </member>
        <member name="M:GifComponents.Tools.Quantizer.GetPalette(System.Drawing.Imaging.ColorPalette)">
            <summary>
            Retrieve the palette for the quantized image
            </summary>
            <param name="original">Any old palette, this is overwritten</param>
            <returns>The new color palette</returns>
        </member>
        <member name="F:GifComponents.Tools.Quantizer._singlePass">
            <summary>
            Flag used to indicate whether a single pass or two passes are needed for quantization.
            </summary>
        </member>
        <member name="T:GifComponents.Palettes.PaletteControl">
            <summary>
            A UserControl for editing an instance of the <see cref="T:GifComponents.Palettes.Palette"/> 
            class, i.e. an Adobe Colour Table.
            </summary>
        </member>
        <member name="F:GifComponents.Palettes.PaletteControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:GifComponents.Palettes.PaletteControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:GifComponents.Palettes.PaletteControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:GifComponents.Palettes.PaletteControl.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:GifComponents.Palettes.PaletteControl.contextMenuColor_Opening(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Occurs when the context menu is opening.
            Enables and disables menu items depending on whether they are valid
            given the current state of the control.
            </summary>
            <param name="sender">
            The object which raised this event
            </param>
            <param name="e">
            Information about the event.
            </param>
        </member>
        <member name="M:GifComponents.Palettes.PaletteControl.SelectFile(System.String)">
            <summary>
            Prompts the user to browse for an Adobe Colour Table file with an
            OpenFileDialog.
            </summary>
            <param name="initialDirectory">
            The folder in which the OpenFileDialog is initially positioned
            </param>
            <returns>
            The path to the file selected by the user, or null if the 
            OpenFileDialog was closed without selecting a file.
            </returns>
        </member>
        <member name="M:GifComponents.Palettes.PaletteControl.LoadPalette(System.String)">
            <summary>
            Loads a Palette from an Adobe Colour Table file
            </summary>
            <param name="fileName">
            Path to the file to load.
            </param>
        </member>
        <member name="M:GifComponents.Palettes.PaletteControl.SavePaletteAs">
            <summary>
            Saves the current palette as an Adobe Colour Table file, prompting
            the user to choose a path and filename with a SaveFileDialog.
            </summary>
        </member>
        <member name="M:GifComponents.Palettes.PaletteControl.Save">
            <summary>
            Saves the current palette to an Adobe Colour Table file using the
            filename it was loaded from.
            If it doesn't have a filename yet, the user is prompted to set one
            using a SaveFileDialog.
            </summary>
        </member>
        <member name="M:GifComponents.Palettes.PaletteControl.NewPalette">
            <summary>
            Populates the control with a new Palette.
            If the Palette currently held in the control has been changed since
            it was last saved, the user is asked whether they want to save any
            changes to it.
            </summary>
        </member>
        <member name="M:GifComponents.Palettes.PaletteControl.UpdateUI">
            <summary>
            Updates the control, showing the latest changes to the Palette.
            </summary>
        </member>
        <member name="M:GifComponents.Palettes.PaletteControl.AddColour">
            <summary>
            Allows the user to add a colour to the palette, using a
            <see cref="T:System.Windows.Forms.ColorDialog"/>.
            </summary>
        </member>
        <member name="M:GifComponents.Palettes.PaletteControl.EditColour">
            <summary>
            Allows the user to edit the currently selected colour in the Palette,
            using a <see cref="T:System.Windows.Forms.ColorDialog"/>.
            </summary>
        </member>
        <member name="M:GifComponents.Palettes.PaletteControl.UpdateColour(System.Int32,System.Drawing.Color)">
            <summary>
            Updates the colour at the specified index in the Palette, replacing
            it with the supplied colour.
            </summary>
            <param name="id">
            The index within the Palette of the colour to be replaced.
            </param>
            <param name="c">
            The colour to replace it with.
            </param>
        </member>
        <member name="M:GifComponents.Palettes.PaletteControl.DeleteColour">
            <summary>
            Removes the currently selected colour from the Palette.
            </summary>
        </member>
        <member name="P:GifComponents.Palettes.PaletteControl.Value">
            <summary>
            Gets and sets the <see cref="T:GifComponents.Palettes.Palette"/> held in this control.
            </summary>
        </member>
        <member name="P:GifComponents.Palettes.PaletteControl.View">
            <summary>
            Gets and sets a member of the <see cref="T:System.Windows.Forms.View"/>
            enumeration which indicates how colours are arranged in the control,
            i.e. list, details or tile.
            </summary>
        </member>
        <member name="P:GifComponents.Palettes.PaletteControl.FileName">
            <summary>
            Gets and sets the file name of the palette being edited.
            </summary>
        </member>
        <member name="P:GifComponents.Palettes.PaletteControl.IsDirty">
            <summary>
            Gets a boolean value indicating whether or not the Palette has been
            changed since it was last saved.
            </summary>
        </member>
        <member name="T:GifComponents.Components.TableBasedImageData">
            <summary>
            The image data for a table based image consists of a sequence of 
            sub-blocks, of size at most 255 bytes each, containing an index into 
            the active color table, for each pixel in the image.  
            Pixel indices are in order of left to right and from top to bottom.  
            Each index must be within the range of the size of the active color 
            table, starting at 0.
            See http://www.w3.org/Graphics/GIF/spec-gif89a.txt section 22
            
            Adapted from John Cristy's ImageMagick.
            Decodes LZW image data into pixel array and returns table-based 
            image data - see http://www.w3.org/Graphics/GIF/spec-gif89a.txt
            section 22.
            Simon Bridewell - July-August 2009
            	Extracted this logic from GifDecoder.cs
            	Added logical properties
            	Derive from GifComponent in order to make use of component status
            	Use stronger types than just byte where appropriate
            </summary>
        </member>
        <member name="F:GifComponents.Components.TableBasedImageData._dataBlocks">
            <summary>
            Data blocks read from the input stream.
            </summary>
        </member>
        <member name="F:GifComponents.Components.TableBasedImageData._pixels">
            <summary>
            An array of indices to colours in the active colour table,
            representing the pixels of a frame in a GIF data stream.
            </summary>
        </member>
        <member name="F:GifComponents.Components.TableBasedImageData._lzwMinimumCodeSize">
            <summary>
            Determines the initial number of bits used for LZW codes 
            in the image data.
            </summary>
        </member>
        <member name="M:GifComponents.Components.TableBasedImageData.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="inputStream">
            The stream from which the image data is to be read, starting with
            the LZW minimum code size, and ending with a block terminator.
            </param>
            <param name="pixelCount">
            Number of pixels in the image.
            </param>
        </member>
        <member name="M:GifComponents.Components.TableBasedImageData.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="inputStream">
            The stream from which the image data is to be read, starting with
            the LZW minimum code size, and ending with a block terminator.
            </param>
            <param name="pixelCount">
            Number of pixels in the image.
            </param>
            <param name="xmlDebugging">Whether or not to create debug XML</param>
            <remarks>
            The input stream is read, first into the LZW minimum code size, then
            into data blocks. Bytes are extracted from the data blocks into a
            datum until the datum contains enough bits to form a code; this code
            is then extracted from the datum and decoded into a pixel index.
            Once all data has been read, or a block terminator, 
            end-of-information code or error condition is encountered, any
            remaining pixel indices not already populated default to zero.
            </remarks>
        </member>
        <member name="M:GifComponents.Components.TableBasedImageData.GetMaximumPossibleCode(System.Int32)">
            <summary>
            Gets the highest possible code for the supplied code size - when
            all bits in the code are set to 1.
            This is used as a bitmask to extract the correct number of least 
            significant bits from the datum to form a code.
            </summary>
            <param name="currentCodeSize"></param>
            <returns></returns>
        </member>
        <member name="M:GifComponents.Components.TableBasedImageData.WriteToStream(System.IO.Stream)">
            <summary>
            Writes this component to the supplied output stream.
            TODO: maybe use LzwEncoder to do this?
            </summary>
            <param name="outputStream">
            The output stream to write to.
            </param>
        </member>
        <member name="P:GifComponents.Components.TableBasedImageData.DataBlocks">
            <summary>
            Gets the data blocks as read from the input stream.
            </summary>
        </member>
        <member name="P:GifComponents.Components.TableBasedImageData.Pixels">
            <summary>
            Gets an array of indices to colours in the active colour table,
            representing the pixels of a frame in a GIF data stream.
            </summary>
        </member>
        <member name="P:GifComponents.Components.TableBasedImageData.LzwMinimumCodeSize">
            <summary>
            Determines the initial number of bits used for LZW codes in the 
            image data.
            This is read from the first available byte in the input stream.
            </summary>
        </member>
        <member name="P:GifComponents.Components.TableBasedImageData.ClearCode">
            <summary>
            A special Clear code is defined which resets all compression / 
            decompression parameters and tables to a start-up state. 
            The value of this code is 2 ^ code size. 
            For example if the code size indicated was 4 (image was 4 bits/pixel)
            the Clear code value would be 16 (10000 binary). 
            The Clear code can appear at any point in the image data stream and 
            therefore requires the LZW algorithm to process succeeding codes as 
            if a new data stream was starting. 
            Encoders should output a Clear code as the first code of each image 
            data stream.
            </summary>
        </member>
        <member name="P:GifComponents.Components.TableBasedImageData.InitialCodeSize">
            <summary>
            Gets the size in bits of the first code to add to the dictionary.
            </summary>
        </member>
        <member name="P:GifComponents.Components.TableBasedImageData.EndOfInformation">
            <summary>
            Gets the code which explicitly marks the end of the image data in
            the stream.
            </summary>
        </member>
        <member name="T:GifComponents.Tools.OctreeQuantizer">
            <summary>
            Quantize using an Octree.
            Based on code downloaded from 
            http://msdn.microsoft.com/en-us/library/aa479306.aspx
            
            Amended by Simon Bridewell, November-December 2009:
            * Small edits to XML comments
            	* Changed namespace to GifComponents
            	* Fixed / suppressed some FxCop warnings
            	* Style changes (e.g. add missing curly brackets around conditional blocks)
            	* Added test for maxColours less than 1 into constructor
            	* Moved Octree and OctreeNode classes into their own files
            	* Changed various access modifiers to internal
            	* Added null argument test to GetPalette method
            	* Added array size test to GetPalette method
            </summary>
        </member>
        <member name="F:GifComponents.Tools.OctreeQuantizer._octree">
            <summary>
            Stores the tree
            </summary>
        </member>
        <member name="F:GifComponents.Tools.OctreeQuantizer._maxColors">
            <summary>
            Maximum allowed color depth
            </summary>
        </member>
        <member name="M:GifComponents.Tools.OctreeQuantizer.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct the octree quantizer
            </summary>
            <remarks>
            The Octree quantizer is a two pass algorithm. The initial pass sets 
            up the octree, the second pass quantizes a colour based on the nodes 
            in the tree.
            </remarks>
            <param name="maxColours">The maximum number of colours to return</param>
            <param name="maxColourBits">The number of significant bits</param>
        </member>
        <member name="M:GifComponents.Tools.OctreeQuantizer.GetPalette(System.Drawing.Imaging.ColorPalette)">
            <summary>
            Retrieve the palette for the quantized image
            </summary>
            <param name="original">Any old palette, this is overwritten</param>
            <returns>The new color palette</returns>
        </member>
        <member name="M:GifComponents.Tools.OctreeQuantizer.InitialQuantizePixel(GifComponents.Tools.Colour32*)">
            <summary>
            Process the pixel in the first pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <remarks>
            This function need only be overridden if your quantize algorithm 
            needs two passes, such as an Octree quantizer.
            </remarks>
        </member>
        <member name="M:GifComponents.Tools.OctreeQuantizer.QuantizePixel(GifComponents.Tools.Colour32*)">
            <summary>
            Override this to process the pixel in the second pass of the 
            algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <returns>The quantized value</returns>
        </member>
        <member name="T:GifComponents.GifDecoderState">
            <summary>
            A list of values indicating whether a GifDecoder has not started, is in
            the process of, or has finished, decoding a GIF stream.
            </summary>
        </member>
        <member name="F:GifComponents.GifDecoderState.NotStarted">
            <summary>
            The GifDecoder has not started decoding.
            </summary>
        </member>
        <member name="F:GifComponents.GifDecoderState.Decoding">
            <summary>
            The GifDecoder is currently decoding a GIF stream.
            </summary>
        </member>
        <member name="F:GifComponents.GifDecoderState.Done">
            <summary>
            The GifDecoder has finished decoding the GIF stream.
            </summary>
        </member>
        <member name="T:GifComponents.Components.ColourTable">
            <summary>
            A global or local colour table which forms part of a GIF data stream.
            </summary>
        </member>
        <member name="F:GifComponents.Components.ColourTable._colours">
            <summary>
            The colours in the colour table.
            </summary>
        </member>
        <member name="M:GifComponents.Components.ColourTable.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:GifComponents.Components.ColourTable.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Reads and returns a colour table from the supplied input stream.
            </summary>
            <param name="inputStream">
            The input stream to read.
            </param>
            <param name="numberOfColours">
            The number of colours the colour table is expected to contain.
            </param>
        </member>
        <member name="M:GifComponents.Components.ColourTable.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Reads and returns a colour table from the supplied input stream.
            </summary>
            <param name="inputStream">
            The input stream to read.
            </param>
            <param name="numberOfColours">
            The number of colours the colour table is expected to contain.
            </param>
            <param name="xmlDebugging">
            Whether or not to create debug XML
            </param>
        </member>
        <member name="M:GifComponents.Components.ColourTable.Add(System.Drawing.Color)">
            <summary>
            Adds the supplied colour to the table
            </summary>
            <param name="colourToAdd">
            The colour to add to the colour table.
            </param>
        </member>
        <member name="M:GifComponents.Components.ColourTable.Pad">
            <summary>
            Pads the colour table out to a length of an exact power of 2
            </summary>
        </member>
        <member name="M:GifComponents.Components.ColourTable.WriteToStream(System.IO.Stream)">
            <summary>
            Writes this component to the supplied output stream.
            </summary>
            <param name="outputStream">
            The output stream to write to.
            </param>
        </member>
        <member name="M:GifComponents.Components.ColourTable.IsPowerOf2(System.Int32)">
            <summary>
            Determines whether the supplied number is an exact power of 2 and
            therefore a suitable size for a colour table.
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="P:GifComponents.Components.ColourTable.Colours">
            <summary>
            Gets the colours in the colour table.
            This property is included in order to make the colours visible in
            a property sheet.
            </summary>
            <remarks>
            This property returns an array rather than a collection because it
            looks better in a property sheet.
            </remarks>
        </member>
        <member name="P:GifComponents.Components.ColourTable.Length">
            <summary>
            Gets the number of colours in the colour table.
            </summary>
        </member>
        <member name="P:GifComponents.Components.ColourTable.SizeBits">
            <summary>
            Gets the number of bits required to hold the length of the colour
            table, minus 1.
            </summary>
        </member>
        <member name="P:GifComponents.Components.ColourTable.Item(System.Int32)">
            <summary>
            Gets or sets the colour at the specified index in the colour table.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The supplied index is outside the bounds of the array.
            </exception>
        </member>
        <member name="T:GifComponents.Palettes.PaletteConverter">
            <summary>
            Allows a string representation of a <see cref="T:GifComponents.Palettes.Palette"/> to be 
            displayed in a <see cref="T:System.Windows.Forms.PropertyGrid"/>.
            </summary>
        </member>
        <member name="M:GifComponents.Palettes.PaletteConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Indicates whether a Palette can be converted to the supplied type.
            </summary>
            <param name="context">
            Contextual information.
            </param>
            <param name="destType">
            The type which we want to know whether a Palette can be converted to.
            </param>
            <returns>
            True: A Palette can be converted to the supplied type.
            False: A Palette cannot be converted to the supplied type.
            </returns>
        </member>
        <member name="M:GifComponents.Palettes.PaletteConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the supplied Palette to the supplied type.
            </summary>
            <param name="context">
            Contextual information.
            </param>
            <param name="culture">
            The culture to use for the conversion.
            </param>
            <param name="value">
            The Palette to convert.
            </param>
            <param name="destType">
            The type to convert to.
            </param>
            <returns>
            The supplied Palette, converted to the supplied type.
            </returns>
        </member>
        <member name="T:GifComponents.ErrorState">
            <summary>
            The error state of a GIF data stream, or of one of the components of
            the stream.
            </summary>
        </member>
        <member name="F:GifComponents.ErrorState.Ok">
            <summary>
            OK - no errors.
            </summary>
        </member>
        <member name="F:GifComponents.ErrorState.BadSignature">
            <summary>
            The "GIF" signature at the start of the file could not be found.
            </summary>
        </member>
        <member name="F:GifComponents.ErrorState.CouldNotOpenFile">
            <summary>
            Unable to open the file for reading. The file could already be open.
            </summary>
        </member>
        <member name="F:GifComponents.ErrorState.DataBlockTooShort">
            <summary>
            A data block was read which was shorter than its declared length.
            </summary>
        </member>
        <member name="F:GifComponents.ErrorState.ColourTableTooShort">
            <summary>
            A colour table was shorter than its declared length.
            </summary>
        </member>
        <member name="F:GifComponents.ErrorState.FrameHasNoColourTable">
            <summary>
            One or more frames has no active colour table.
            </summary>
        </member>
        <member name="F:GifComponents.ErrorState.BadDataBlockIntroducer">
            <summary>
            A data block begins with an invalid byte.
            Valid bytes are:
            	0x2c - image separator
            	0x21 - extension
            	0x3b - terminator
            	0x00 - actually invalid but supported by the decoder
            </summary>
        </member>
        <member name="F:GifComponents.ErrorState.EndOfInputStream">
            <summary>
            The decoder is still trying to read more data from the input stream
            but has reached the end of the stream.
            </summary>
        </member>
        <member name="F:GifComponents.ErrorState.LzwMinimumCodeSizeTooLarge">
            <summary>
            An image block contains a LZW minimum code size which would result
            in a clear code larger than the maximum stack size.
            </summary>
        </member>
        <member name="F:GifComponents.ErrorState.NotANetscapeExtension">
            <summary>
            An application extension declared itself as a Netscape extension
            but does not follow the format of a Netscape extension.
            </summary>
        </member>
        <member name="F:GifComponents.ErrorState.IdentificationBlockTooLong">
            <summary>
            The identification block is longer than 11 bytes.
            </summary>
        </member>
        <member name="F:GifComponents.ErrorState.DataBlockTooLong">
            <summary>
            A data block was read which was longer than its declared length.
            </summary>
        </member>
        <member name="F:GifComponents.ErrorState.TooFewPixelsInImageData">
            <summary>
            The table-based image data contained data for fewer pixels than
            expected given the supplied image size.
            </summary>
        </member>
        <member name="F:GifComponents.ErrorState.UnableToIncreaseCodeSize">
            <summary>
            The decoder's dictionary is full, it was not possible to increase
            the code size given the maximum possible size of the dictionary.
            </summary>
        </member>
        <member name="F:GifComponents.ErrorState.CodeNotInDictionary">
            <summary>
            A code was read which is not in the dictionary and is not the next
            code available to be added to the dictionary.
            </summary>
        </member>
        <member name="F:GifComponents.ErrorState.StackSizeExceeded">
            <summary>
            The next available code is greater than or equal to the maximum
            stack size.
            </summary>
        </member>
        <member name="F:GifComponents.ErrorState.FrameHasNoImageData">
            <summary>
            The frame's LZW image data decoded to a zero-length array.
            </summary>
        </member>
        <member name="F:GifComponents.ErrorState.UnexpectedBlockTerminator">
            <summary>
            An unexpected block terminator was encountered.
            </summary>
        </member>
        <member name="F:GifComponents.ErrorState.BadColourIndex">
            <summary>
            The decoded image data contains an index which is outside the range
            of the active colour table.
            </summary>
        </member>
        <member name="F:GifComponents.ErrorState.NoGraphicControlExtension">
            <summary>
            The frame does not have a graphic control extension.
            </summary>
        </member>
        <member name="T:GifComponents.DisposalMethod">
            <summary>
            Enumeration of disposal methods that can be found in a Graphic Control
            Extension.
            See http://www.w3.org/Graphics/GIF/spec-gif89a.txt section 23.
            </summary>
        </member>
        <member name="F:GifComponents.DisposalMethod.NotSpecified">
            <summary>
            0 - No disposal specified. The decoder is not required to take any 
            action.
            </summary>
        </member>
        <member name="F:GifComponents.DisposalMethod.DoNotDispose">
            <summary>
            1 - Do not dispose. The graphic is to be left in place.
            </summary>
        </member>
        <member name="F:GifComponents.DisposalMethod.RestoreToBackgroundColour">
            <summary>
            2 - Restore to background color. The area used by the graphic must 
            be restored to the background color.
            </summary>
        </member>
        <member name="F:GifComponents.DisposalMethod.RestoreToPrevious">
            <summary>
            3 - Restore to previous. The decoder is required to restore the 
            area overwritten by the graphic with what was there prior to 
            rendering the graphic.
            </summary>
        </member>
        <member name="F:GifComponents.DisposalMethod.ToBeDefined4">
            <summary>
            4 - To be defined.
            </summary>
        </member>
        <member name="F:GifComponents.DisposalMethod.ToBeDefined5">
            <summary>
            5 - To be defined.
            </summary>
        </member>
        <member name="F:GifComponents.DisposalMethod.ToBeDefined6">
            <summary>
            6 - To be defined.
            </summary>
        </member>
        <member name="F:GifComponents.DisposalMethod.ToBeDefined7">
            <summary>
            7 - To be defined.
            </summary>
        </member>
        <member name="T:GifComponents.Components.LogicalScreenDescriptor">
            <summary>
            The Logical Screen Descriptor component of a Graphics Interchange Format
            stream.
            See http://www.w3.org/Graphics/GIF/spec-gif89a.txt section 18.
            </summary>
            <remarks>
            The Logical Screen Descriptor contains the parameters necessary to 
            define the area of the display device within which the images will be 
            rendered. The coordinates in this block are given with respect to the 
            top-left corner of the virtual screen; they do not necessarily refer to 
            absolute coordinates on the display device.  This implies that they 
            could refer to window coordinates in a window-based environment or 
            printer coordinates when a printer is used. 
            This block is REQUIRED; exactly one Logical Screen Descriptor must be
            present per Data Stream.
            </remarks>
        </member>
        <member name="M:GifComponents.Components.LogicalScreenDescriptor.#ctor(System.Drawing.Size,System.Boolean,System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="logicalScreenSize">
            The width and height, in pixels, of the logical screen where
            the images will be rendered in the displaying device.
            </param>
            <param name="hasGlobalColourTable">
            Indicates the presence of a Global Color Table; if the flag is set, 
            the Global Color Table will immediately follow the Logical Screen 
            Descriptor. 
            This flag also selects the interpretation of the Background Color 
            Index; if the flag is set, the value of the Background Color Index 
            field should be used as the table index of the background color.
            </param>
            <param name="colourResolution">
            The number of bits per primary color available to the original 
            image, minus 1. 
            This value represents the size of the entire palette from which the 
            colors in the graphic were selected, not the number of colors 
            actually used in the graphic.
            For example, if the value in this field is 3, then the palette of
            the original image had 4 bits per primary color available to create
            the image.  This value should be set to indicate the richness of
            the original palette, even if not every color from the whole
            palette is available on the source machine.
            </param>
            <param name="globalColourTableIsSorted">
            Indicates whether the Global Color Table is sorted.
            If the flag is set, the Global Color Table is sorted, in order of
            decreasing importance. Typically, the order would be decreasing
            frequency, with most frequent color first. This assists a decoder,
            with fewer available colors, in choosing the best subset of colors;
            the decoder may use an initial segment of the table to render the
            </param>
            <param name="globalColourTableSizeBits">
            The number of bits required to hold the size of the global colour
            table.
            To determine the actual size of the color table, raise 2 to 
            [the value of the field + 1]. 
            E.g. if this parameter is 7 then the global colour table will be 
            2^(7+1) = 256 bytes long.
            See also <see cref="P:GifComponents.Components.LogicalScreenDescriptor.GlobalColourTableSize"/>
            </param>
            <param name="backgroundColourIndex">
            Gets the index into the Global Color Table for the Background Color.
            The Background Color is the color used for those pixels on the 
            screen that are not covered by an image. 
            If the Global Color Table Flag is set to (zero), this field should 
            be zero and should be ignored.
            </param>
            <param name="pixelAspectRatio">
            Gets the factor used to compute an approximation of the aspect ratio 
            of the pixel in the original image.  
            </param>
            <returns></returns>
        </member>
        <member name="M:GifComponents.Components.LogicalScreenDescriptor.#ctor(System.IO.Stream)">
            <summary>
            Constructor.
            Reads and returns a logical screen descriptor from the supplied
            input stream.
            </summary>
            <param name="inputStream">
            The input stream to be read.
            </param>
        </member>
        <member name="M:GifComponents.Components.LogicalScreenDescriptor.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Constructor.
            Reads and returns a logical screen descriptor from the supplied
            input stream.
            </summary>
            <param name="inputStream">
            The input stream to be read.
            </param>
            <param name="xmlDebugging">
            Whether or not to create debug XML.
            </param>
        </member>
        <member name="M:GifComponents.Components.LogicalScreenDescriptor.WriteToStream(System.IO.Stream)">
            <summary>
            Writes this component to the supplied output stream.
            </summary>
            <param name="outputStream">
            The output stream to write to.
            </param>
        </member>
        <member name="P:GifComponents.Components.LogicalScreenDescriptor.LogicalScreenSize">
            <summary>
            Gets the width and height, in pixels, of the logical screen where
            the images will be rendered in the displaying device.
            </summary>
        </member>
        <member name="P:GifComponents.Components.LogicalScreenDescriptor.HasGlobalColourTable">
            <summary>
            Gets a flag indicating the presence of a Global Color Table; if the 
            flag is set, the Global Color Table will immediately follow the 
            Logical Screen Descriptor. This flag also selects the interpretation 
            of the Background Color Index; if the flag is set, the value of the 
            Background Color Index field should be used as the table index of 
            the background color.
            </summary>
        </member>
        <member name="P:GifComponents.Components.LogicalScreenDescriptor.ColourResolution">
            <summary>
            Gets the number of bits per primary color available to the original 
            image, minus 1. This value represents the size of the entire palette 
            from which the colors in the graphic were selected, not the number 
            of colors actually used in the graphic.
            For example, if the value in this field is 3, then the palette of
            the original image had 4 bits per primary color available to create
            the image.  This value should be set to indicate the richness of
            the original palette, even if not every color from the whole
            palette is available on the source machine.
            </summary>
        </member>
        <member name="P:GifComponents.Components.LogicalScreenDescriptor.GlobalColourTableIsSorted">
            <summary>
            Indicates whether the Global Color Table is sorted.
            If the flag is set, the Global Color Table is sorted, in order of
            decreasing importance. Typically, the order would be decreasing
            frequency, with most frequent color first. This assists a decoder,
            with fewer available colors, in choosing the best subset of colors;
            the decoder may use an initial segment of the table to render the
            graphic.
            </summary>
        </member>
        <member name="P:GifComponents.Components.LogicalScreenDescriptor.GlobalColourTableSizeBits">
            <summary>
            If the Global Color Table Flag is set to 1, the value in this field 
            is used to calculate the number of bytes contained in the Global 
            Color Table. To determine that actual size of the color table, 
            raise 2 to [the value of the field + 1].  
            Even if there is no Global Color Table specified, set this field 
            according to the above formula so that decoders can choose the best 
            graphics mode to display the stream in.
            </summary>
            <remarks>
            This is the value of the globalColourTableSizeBits parameter passed
            to the constructor.
            </remarks>
        </member>
        <member name="P:GifComponents.Components.LogicalScreenDescriptor.GlobalColourTableSize">
            <summary>
            Gets the number of colours in the global colour table.
            </summary>
        </member>
        <member name="P:GifComponents.Components.LogicalScreenDescriptor.BackgroundColourIndex">
            <summary>
            Gets the index into the Global Color Table for the Background Color.
            The Background Color is the color used for those pixels on the 
            screen that are not covered by an image. 
            If the Global Color Table Flag is set to (zero), this field should 
            be zero and should be ignored.
            </summary>
        </member>
        <member name="P:GifComponents.Components.LogicalScreenDescriptor.PixelAspectRatio">
            <summary>
            Gets the factor used to compute an approximation of the aspect ratio 
            of the pixel in the original image.  If the value of the field is 
            not 0, this approximation of the aspect ratio is computed based on 
            the formula:
            
            Aspect Ratio = (Pixel Aspect Ratio + 15) / 64
            
            The Pixel Aspect Ratio is defined to be the quotient of the pixel's
            width over its height.  The value range in this field allows
            specification of the widest pixel of 4:1 to the tallest pixel of
            1:4 in increments of 1/64th.
            </summary>
        </member>
    </members>
</doc>
